#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 57
#define YY_END_OF_BUFFER 58
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[772] =
    {   0,
        0,    0,    1,    1,    0,    0,   58,   56,   54,   55,
       12,   19,   20,   14,   13,   28,   15,   24,   17,   53,
       23,   18,   26,   27,   25,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   21,   56,   22,
       16,    1,    1,    1,    3,    4,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   11,   11,   10,    9,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   52,   11,   52,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   21,   11,   22,   11,   54,
        6,    7,    8,   53,   47,   48,   49,   52,   52,   52,
        0,   52,   52,    0,   33,   33,   34,   35,   52,   34,
       52,   52,    0,   52,   52,    0,   44,   44,   52,    0,
       52,    0,   52,    0,   51,   51,   51,   51,   51,   51,
       33,   33,   34,   35,   51,   51,   51,   51,   51,   44,
       51,   51,   51,    0,   51,    0,    0,   34,    0,    0,

       35,    0,    0,   33,    1,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   11,   10,
        9,    0,   11,    6,    7,   11,   11,   11,   11,   11,
       52,   52,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   52,   11,   11,   52,   11,   11,
       11,   51,   51,   11,   11,   11,   11,   51,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       51,   51,   11,   11,   11,   51,   11,    0,   11,   11,
        0,   11,   11,   11,   11,   11,   11,   11,    8,   52,
        0,   52,    0,    0,   52,    0,   52,    0,    0,   52,
        0,   52,    0,    0,   37,   37,   52,    0,   37,   45,
       45,   50,   50,   45,   52,    0,   52,    0,   52,    0,
       51,   51,   51,   51,   51,    0,   51,   51,   37,   51,
       45,   50,   51,   51,   51,    0,    0,   51,   37,    0,

        0,    0,   50,    0,    0,    0,   37,   37,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   11,   11,   52,
       11,   11,    0,   11,   11,   11,   52,   11,   11,    0,
       11,   52,   11,   11,   11,   11,    0,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   51,   11,   11,   51,   11,
       11,   11,   51,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    0,   11,   11,   11,   11,   42,   42,   52,    0,
       42,   32,   32,   43,   43,   32,   52,    0,   52,    0,
        0,   38,   38,   39,   39,   40,   40,   52,    0,   42,
       51,   32,   43,   51,    0,   51,   51,   38,   39,   40,
       29,   29,   29,   51,   40,   32,   38,   43,   43,   32,
       32,   39,   32,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       11,   11,   11,   11,   11,   11,   11,   43,   11,   11,
       43,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   43,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       31,   31,   52,    0,   52,    0,    0,   41,   41,   31,
       30,   30,   51,   51,   41,   31,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   11,   11,   52,   11,   11,    0,   11,   11,
       11,   11,   11,   11,   11,   11,   51,   11,   11,   11,
       11,   52,    0,   46,   46,   46,   51,   46,    1,    1,
        1,    1,    1,    1,    1,   11,   11,   11,   11,   11,
       11,   11,   52,    0,   51,    1,    1,    1,   11,   11,
       11,   36,   36,   36,    1,    1,    1,   11,   11,   11,
        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   26,   27,   21,   21,   28,   21,   29,   30,   31,
       21,   32,   33,   34,   35,   36,   37,   21,   21,   21,
        1,    1,    1,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   40,   45,   46,   40,   40,   47,   40,   48,
       49,   50,   40,   51,   52,   53,   54,   55,   56,   40,
       40,   40,   57,   58,   59,   60,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[61] =
    {   0,
        1,    1,    2,    1,    3,    3,    3,    1,    1,    1,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[779] =
    {   0,
        0,    0,   60,    0,  120,    0,  296, 3761,  293, 3761,
     3761,  285, 3761,  284, 3761, 3761,  278, 3761, 3761,  274,
     3761, 3761,  171,  267, 3761,    0,  162,  156,  158,  167,
      163,  175,  169,  168,  165,  196,    0,  208,  201,  210,
      213,  215,  220,  218,  202,  248,  244, 3761,  287, 3761,
     3761,    0,  281,    0,  274, 3761,  271,    0,    0,    0,
        0,    0,  239,    0,    0,  185,  222,    0,  345,  405,
      290,  338,  446,  350,  410,  247,  398,  353,  422,  504,
      564,  497,  511,  605,  453,  569,  509,  557,  581,  609,
        0,  648,    0,    0,  679,  682, 3761, 3761,  720,  725,

      728,  766,  769,  777,  790,  811,  826,  837,  852,  909,
      873,  914,  973,    0,  280,  251,  294,  343,  452,  502,
      325,  397,  483,  501, 1033,  622,  608,  412,  895,  621,
      713,  385,  494,  787,  645, 1091, 1148, 1096, 1099,  233,
     3761, 3761,    0,  218, 3761, 3761, 3761,    0,  402,  668,
      834,  439,  705,  869,    0, 3761,    0,  672,  246,  845,
      378,  556,  725,  285,  537,  911,    0, 3761,  561,  830,
      784,  858,  879,  896,    0,  607,  894,  905, 1076,  777,
        0, 1077,    0, 1075, 1071, 1074, 1108,  330, 1096,    0,
     1111, 1121,  336, 1166, 1113, 1109, 1165, 3761, 1184, 1183,

     1159, 1180, 1192, 1231,    0,  205, 3761,  184,    0,    0,
        0, 1224, 1265, 1234, 1220, 1268, 1271, 1270, 1274,    0,
     1277, 1280, 1311, 1304, 1314, 1316, 1322, 1340, 1350, 1348,
     1353,    0, 1363, 1185, 1366, 1202, 1387, 1287, 1397, 1399,
     1400, 1402, 1403, 1409, 1442, 1424, 1444, 1448, 1449, 1445,
     1481, 1477, 1493, 1490, 1495, 1521, 1527, 1526, 1543, 1130,
     1520,    0, 1548, 1563, 1211, 1558, 1573, 1612, 1615, 3761,
     3761, 1630, 1673, 1676, 1681, 1721, 1724, 1745, 1765,    0,
        0, 1562, 1126, 1565, 1822, 1572, 1337, 1658,    0, 1684,
        0, 1454, 1567, 1737, 1485, 1528, 1778,  914, 1656, 1776,

        0, 1706, 1624, 1813, 1586, 1657, 1817, 1432, 1613, 1818,
        0,    0, 1636, 1735, 1679, 1742, 1781, 1664,    0, 1732,
     1839,    0, 1758, 1763, 1815, 1756, 1826, 1832,    0, 1847,
     1859,  449, 1863, 1178, 1868, 1761, 1866, 1869, 1895, 1898,
     1916, 1861, 1913, 1943, 1947, 1884, 1961, 2000,    0, 1911,
     1914, 1908, 1912, 1954, 1960, 1965,  839, 1903, 2007, 1967,
     1974, 1986, 2008, 2030,    0, 3761,  718, 2009, 2011,    0,
     3761,    0, 3761, 3761, 2023, 2035, 2039, 2042, 2036, 2044,
     2004, 1957, 2052, 2055, 2047, 2051, 2061, 2059,    0, 2070,
        0,    0, 2064, 2077, 2083, 2088, 2094, 2086, 3761, 2101,

     2110, 2108, 2123, 2134, 2128, 2114, 3761, 2171, 2170, 2139,
     2183, 2127, 2182, 2218, 2181, 2223, 2169, 2209, 2235, 2213,
     2238, 2230, 2256, 2255,    0, 2269, 2253, 2259, 2284,    0,
     2287,    0,    0, 2290, 2149, 2304, 2243, 2300, 2278, 2326,
     2333, 2335, 2348, 2355, 2240, 2372, 2384, 2302, 2370, 2377,
     2390, 2406, 2412, 2419, 2403, 2420, 2437,    0, 2427, 2447,
     2451, 2460, 2459, 2461, 2463,    0, 2500, 2468, 2503, 2482,
     2487, 2505, 2531, 2536, 2529, 2547, 2299, 2345, 2562, 2571,
     2576, 2549, 2573, 2602, 2572, 2607, 2618, 2619,    0, 2630,
     2504, 2633, 2647,    0, 2654,    0, 2659, 2661, 2439, 2675,

     2667, 2687, 2578, 2690, 2589, 2676, 2688, 2700, 2708, 2709,
     2699, 2721, 2712, 2720, 2722,    0, 2725,    0,    0, 2734,
     2724, 2741, 2765, 2767, 2758, 2768, 2801, 2770, 2804, 2811,
     2835, 2844, 2847, 2794, 2859, 2898,    0, 3761, 2760, 2837,
     2839,    0, 3761,    0, 3761, 3761,  293, 2089, 2848, 2855,
     2903,    0, 3761,    0, 3761,    0, 3761, 2880, 2897,    0,
     2899,    0,    0, 2900, 2901, 2527, 2861,    0,    0,    0,
        0, 3761, 3761, 2909, 2910, 2927, 3761, 2935, 2930, 3761,
     2744, 2940, 2962, 2945,    0, 2971, 2938, 2954, 2987,    0,
     2989,    0,    0, 2999, 2979, 3005, 2995, 3008, 3028,    0,

     3040,    0, 3041,    0, 3050, 3000, 3044, 3057, 3045, 3085,
     3086, 3058, 3091, 3100, 3098, 3120, 3132, 3133,    0,    0,
     3142, 3093, 3117,    0, 3049, 3124,    0, 3136, 3130, 3169,
        0, 3164, 3153, 3184, 3186,    0, 3193,    0,    0, 3198,
     3208, 3210, 3182, 3226, 3054, 3228, 3237,    0, 3252,    0,
     3259,    0, 3261, 3140, 3273,    0, 3177,    0,    0,    0,
     3247, 3294, 3250, 3276,    0,    0,    0,    0, 3287, 3303,
     3272, 3308, 3315, 3320, 3323, 3324, 3338, 3354, 3359, 3398,
        0, 3761, 3322, 3343,  512, 1494, 3361,    0, 3761,    0,
        0, 3761, 3358, 1585,    0, 3368, 3393,    0, 3400, 3396,

     3425, 1872, 3432, 3437,    0, 3440, 3441,    0, 3465, 3466,
     3481, 3473,    0, 3477, 3475, 3476, 3505, 3510, 3484, 3525,
     3527,    0, 3507,    0,    0, 3541, 3526, 3543, 3494,    0,
     3567, 2131, 2944,    0, 3761, 3544, 3552,    0, 3583, 3554,
     3576,    0, 3574, 3601, 3598, 3580, 3619,    0, 3611, 3627,
     3609,    0, 3419, 3616, 3618, 3645, 3631, 3662, 3642, 3666,
     3654,    0, 3761,    0, 3668,    0, 3682,    0, 3678,    0,
     3761,  182,  179, 3740, 3744, 3748, 3752, 3756
    } ;

static yyconst flex_int16_t yy_def[779] =
    {   0,
      771,    1,  771,    3,  771,    5,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  771,  771,  771,
      771,  774,  774,  774,  771,  771,  771,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  775,  775,
       70,   70,   70,   70,   70,   70,   70,   70,   70,  776,
      776,   81,   81,   81,   81,   81,   81,   81,   81,   81,
      774,  774,  774,  774,  777,  777,  771,  771,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  771,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  771,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  777,  777,  777,  777,  771,
      771,  771,  778,  771,  771,  771,  771,  772,  772,  772,
      771,  772,  772,  771,  772,  771,  772,  772,  772,  771,
      772,  772,  771,  772,  772,  771,  772,  771,  772,  771,
      772,  771,  772,  771,  773,  773,  773,  773,  773,  773,
      773,  771,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  771,  773,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  774,  774,  771,  774,  774,  774,
      774,   70,   70,   70,  774,   70,   70,  774,   70,  774,
       70,   70,   70,  774,   70,   70,  774,   70,   70,  774,
       70,  774,   70,  774,   70,  774,   70,  774,   81,   81,
       81,   81,   81,   81,   81,  774,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,  774,   81,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  777,  771,
      771,  777,  777,  777,  777,  777,  777,  777,  777,  113,
      113,  113,  113,  113,  777,  113,  113,  285,  113,  285,
      113,  113,  113,  285,  113,  113,  285,  113,  113,  285,

      113,  285,  113,  285,  113,  113,  285,  113,  113,  285,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      285,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  285,  125,  125,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  778,  772,
      771,  772,  771,  771,  772,  771,  772,  771,  771,  772,
      771,  772,  771,  771,  772,  771,  772,  771,  771,  772,
      771,  772,  771,  771,  772,  771,  772,  771,  772,  771,
      773,  773,  773,  773,  773,  771,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  771,  771,  773,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,   70,  774,
       70,  774,  774,   70,  774,   70,  774,  774,   70,  774,
       70,  774,  774,   70,  774,   70,  774,  774,   70,  774,
       70,  774,  774,   70,  774,   70,  774,   70,  774,   81,
       81,   81,   81,   81,  774,   81,   81,   81,   81,   81,
       81,   81,   81,   81,  774,  774,   81,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  113,  285,  113,
      113,  285,  285,  285,  113,  285,  113,  113,  285,  285,
      285,  113,  113,  285,  113,  285,  285,  285,  113,  285,
      113,  285,  285,  113,  285,  113,  285,  285,  113,  285,

      113,  285,  113,  285,  125,  125,  125,  125,  125,  125,
      125,  285,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  285,  285,  125,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  772,  771,  772,  771,
      771,  772,  771,  772,  771,  771,  772,  771,  772,  771,
      771,  772,  771,  772,  771,  772,  771,  772,  771,  773,
      773,  773,  773,  773,  771,  773,  773,  773,  773,  773,
      773,  771,  771,  773,  771,  771,  771,  771,  771,  771,
      771,  771,  771,   70,  774,   70,  774,  774,   70,  774,
       70,  774,  774,   70,  774,   70,  774,  774,   70,  774,

       70,  774,   70,  774,   70,  774,   81,   81,   81,   81,
       81,  774,   81,   81,   81,   81,   81,   81,  774,  774,
       81,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      113,  285,  113,  285,  285,  113,  285,  113,  113,  285,
      285,  285,  113,  285,  113,  285,  285,  113,  285,  113,
      285,  113,  285,  113,  285,  125,  125,  125,  125,  125,
      125,  285,  125,  125,  125,  125,  125,  125,  285,  285,
      125,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      772,  771,  772,  771,  772,  771,  771,  772,  771,  773,
      773,  771,  773,  773,  773,  771,   70,  774,   70,  774,

       70,  774,  774,   70,  774,   81,   81,  774,   81,   81,
       81,  774,  113,  285,  113,  113,  285,  285,  113,  285,
      285,  113,  285,  125,  125,  285,  125,  125,  125,  125,
      285,  772,  771,  772,  771,  771,  773,  773,   70,  774,
       70,  774,  774,   81,   81,  113,  285,  113,  285,  285,
      125,  125,  772,  771,  773,   70,  774,   81,  113,  285,
      125,  772,  771,  773,   70,  774,   81,  113,  285,  125,
        0,  771,  771,  771,  771,  771,  771,  771
    } ;

static yyconst flex_uint16_t yy_nxt[3822] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,    8,   25,   26,
       26,   27,   26,   28,   29,   26,   30,   31,   32,   33,
       34,   26,   26,   35,   26,   26,   36,    8,   37,   37,
       38,   37,   39,   40,   37,   41,   42,   43,   44,   45,
       37,   37,   46,   37,   37,   47,   48,   49,   50,   51,
       52,   53,   10,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   52,   68,   69,
       69,   70,   69,   71,   72,   69,   73,   74,   75,   76,
       77,   69,   69,   78,   69,   69,   79,   52,   80,   80,

       81,   80,   82,   83,   80,   84,   85,   86,   87,   88,
       80,   80,   89,   80,   80,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,   95,  112,  113,
      114,  115,  114,  116,  117,  113,  118,  119,  120,  121,
      122,  113,  114,  123,  114,  114,  124,   95,  125,  125,
      126,  125,  127,  128,  125,  129,  130,  131,  132,  133,
      125,  125,  134,  125,  125,  135,  136,  137,  138,  139,
      145,  149,  175,  152,  155,  148,  161,  146,  153,  150,
      171,  157,  162,  167,  209,  158,  208,  169,  164,  159,

      149,  210,  152,  155,  165,  161,  206,  153,  150,  171,
      157,  162,  167,  154,  158,  156,  169,  164,  159,  151,
      163,  173,  172,  165,  160,  170,  168,  176,  178,  180,
      144,  191,  166,  179,  140,  177,  181,  183,  186,  211,
      173,  184,  190,  188,  187,  185,  176,  178,  180,  189,
      191,  208,  179,  174,  177,  181,  183,  186,  154,  170,
      184,  190,  188,  187,  185,  151,  212,  182,  189,  195,
      160,  231,  163,  192,  212,  168,  207,  166,  286,  193,
      141,  362,  206,  287,  147,  212,  144,  143,  195,  142,
      231,  141,  192,  212,  140,  771,  771,  286,  193,  282,

      362,  174,  287,  363,  232,  194,  196,  283,  288,  212,
      197,  198,  199,  156,  200,  201,  202,  216,  284,  203,
      289,  370,  217,  771,  683,  196,  283,  771,  212,  197,
      198,  199,  156,  200,  201,  202,  216,  285,  203,  289,
      370,  217,  371,  683,  204,  205,  205,  218,  205,  301,
      684,  290,  205,  205,  205,  205,  205,  212,  205,  205,
      205,  205,  205,  205,  219,  212,  391,  291,  301,  212,
      395,  292,  212,  225,  771,  293,  212,  212,  235,  226,
      212,  771,  302,  219,  212,  391,  291,  371,  212,  395,
      292,  212,  225,  396,  293,  220,  212,  235,  226,  212,

      294,  205,  205,  205,  205,  205,  205,  227,  205,  329,
      236,  365,  205,  205,  205,  205,  205,  212,  205,  205,
      205,  205,  205,  205,  213,  212,  303,  233,  329,  212,
      365,  318,  214,  228,  350,  366,  212,  212,  319,  229,
      771,  212,  302,  213,  212,  303,  233,  237,  212,  212,
      320,  214,  228,  350,  304,  234,  212,  319,  229,  351,
      212,  205,  215,  205,  205,  212,  237,  230,  212,  321,
      221,  355,  239,  212,  222,  295,  250,  771,  223,  238,
      239,  296,  251,  522,  212,  771,  771,  771,  771,  221,
      355,  239,  212,  222,  295,  250,  356,  223,  771,  239,

      296,  251,  522,  224,  205,  205,  523,  205,  305,  297,
      227,  205,  205,  205,  205,  205,  239,  205,  205,  205,
      205,  205,  205,  330,  242,  298,  308,  306,  239,  243,
      244,  299,  771,  254,  734,  239,  239,  245,  239,  771,
      307,  771,  330,  242,  298,  309,  771,  239,  243,  244,
      299,  304,  254,  734,  218,  239,  245,  239,  310,  300,
      205,  205,  205,  205,  205,  205,  232,  205,  246,  735,
      372,  205,  205,  205,  205,  205,  239,  205,  205,  205,
      205,  205,  205,  240,  239,  367,  255,  771,  239,  372,
      375,  241,  252,  771,  373,  239,  239,  771,  253,  771,

      239,  771,  240,  239,  367,  255,  256,  239,  239,  375,
      241,  252,  257,  368,  234,  239,  771,  253,  376,  239,
      205,  215,  205,  205,  239,  256,  230,  239,  239,  247,
      771,  257,  239,  248,  259,  316,  239,  249,  258,  381,
      317,  313,  771,  239,  325,  771,  771,  239,  247,  314,
      326,  239,  248,  259,  316,  239,  249,  771,  381,  317,
      315,  771,  224,  325,  351,  288,  238,  260,  314,  326,
      336,  261,  262,  263,  220,  264,  265,  266,  297,  285,
      267,  270,  271,  273,  270,  271,  260,  352,  771,  337,
      261,  262,  263,  220,  264,  265,  266,  360,  272,  267,

      272,  272,  310,  272,  272,  268,  352,  272,  771,  771,
      272,  771,  771,  272,  771,  771,  360,  771,  771,  771,
      771,  771,  270,  271,  357,  353,  274,  270,  271,  361,
      270,  271,  771,  275,  771,  272,  327,  272,  272,  272,
      272,  272,  328,  357,  272,  272,  272,  272,  552,  272,
      272,  272,  771,  272,  368,  327,  272,  771,  366,  272,
      771,  328,  358,  771,  771,  771,  771,  552,  270,  271,
      300,  270,  271,  368,  771,  553,  272,  366,  272,  270,
      271,  272,  369,  272,  272,  272,  272,  272,  272,  771,
      272,  272,  270,  271,  272,  771,  272,  272,  272,  771,

      272,  771,  272,  771,  385,  771,  771,  377,  272,  272,
      771,  272,  331,  270,  271,  272,  771,  771,  332,  771,
      771,  272,  272,  385,  272,  272,  377,  272,  270,  271,
      272,  333,  272,  272,  386,  272,  272,  334,  276,  270,
      271,  378,  272,  771,  335,  272,  272,  272,  272,  771,
      771,  272,  771,  353,  270,  271,  272,  272,  272,  376,
      544,  771,  272,  771,  771,  771,  351,  272,  272,  272,
      361,  272,  353,  272,  771,  270,  271,  272,  376,  544,
      363,  378,  272,  272,  272,  351,  771,  376,  358,  361,
      279,  354,  272,  272,  272,  272,  545,  771,  272,  363,

      378,  356,  364,  771,  272,  379,  771,  358,  272,  771,
      272,  270,  271,  382,  771,  378,  270,  271,  277,  322,
      356,  771,  380,  323,  379,  278,  359,  324,  272,  272,
      272,  272,  382,  272,  272,  272,  380,  383,  322,  272,
      272,  380,  323,  771,  373,  272,  324,  371,  771,  771,
      494,  353,  294,  380,  771,  771,  383,  771,  771,  771,
      771,  771,  356,  373,  771,  272,  371,  272,  374,  494,
      272,  495,  272,  269,  269,  270,  271,  269,  269,  269,
      269,  269,  269,  269,  269,  280,  269,  269,  269,  269,
      269,  269,  281,  280,  281,  280,  280,  280,  281,  280,

      280,  280,  280,  280,  281,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  272,
      269,  272,  269,  269,  269,  270,  271,  269,  269,  269,
      269,  269,  269,  269,  269,  311,  269,  269,  269,  269,
      269,  269,  312,  311,  312,  311,  311,  311,  312,  311,
      311,  311,  311,  311,  312,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  272,
      269,  272,  269,  270,  271,  384,  771,  771,  270,  271,

      387,  270,  271,  771,  386,  771,  388,  389,  771,  771,
      272,  771,  272,  771,  384,  272,  272,  272,  272,  387,
      272,  272,  272,  386,  272,  388,  389,  272,  363,  392,
      272,  366,  361,  358,  386,  771,  771,  390,  771,  398,
      393,  351,  771,  771,  394,  470,  771,  272,  392,  272,
      270,  271,  272,  373,  272,  272,  390,  272,  398,  393,
      351,  771,  410,  394,  471,  368,  351,  338,  376,  272,
      380,  339,  340,  341,  290,  342,  343,  344,  378,  272,
      345,  410,  771,  472,  361,  771,  346,  410,  771,  378,
      339,  340,  347,  290,  342,  343,  344,  771,  366,  345,

      396,  371,  353,  361,  272,  348,  272,  378,  378,  402,
      380,  358,  522,  373,  435,  356,  361,  366,  771,  396,
      371,  353,  399,  397,  771,  437,  378,  363,  402,  380,
      358,  522,  373,  435,  356,  523,  420,  403,  771,  412,
      401,  400,  435,  212,  437,  771,  363,  771,  771,  404,
      405,  212,  410,  411,  378,  420,  361,  380,  412,  437,
      402,  212,  212,  406,  407,  771,  363,  371,  420,  405,
      212,  410,  411,  378,  771,  361,  380,  413,  771,  402,
      212,  205,  406,  407,  212,  363,  371,  212,  408,  417,
      416,  412,  212,  212,  771,  212,  212,  409,  212,  212,

      414,  212,  415,  212,  212,  419,  212,  212,  417,  416,
      771,  212,  212,  439,  212,  212,  409,  212,  212,  414,
      212,  415,  410,  212,  419,  415,  212,  418,  417,  420,
      212,  205,  439,  212,  205,  212,  771,  420,  212,  422,
      771,  212,  771,  212,  439,  426,  421,  424,  420,  212,
      771,  427,  212,  771,  212,  425,  477,  212,  422,  212,
      212,  423,  212,  771,  426,  421,  424,  212,  422,  212,
      427,  425,  212,  427,  425,  478,  429,  212,  212,  428,
      212,  432,  212,  431,  430,  212,  212,  771,  212,  436,
      212,  212,  434,  212,  479,  429,  212,  430,  771,  212,

      432,  212,  431,  430,  212,  433,  212,  432,  436,  212,
      205,  434,  212,  438,  212,  771,  239,  771,  239,  441,
      435,  239,  443,  437,  239,  212,  239,  239,  239,  239,
      239,  440,  438,  212,  442,  239,  444,  239,  441,  771,
      239,  443,  771,  239,  439,  239,  239,  239,  239,  239,
      440,  445,  771,  442,  205,  444,  410,  412,  503,  415,
      417,  239,  771,  239,  239,  771,  445,  239,  239,  239,
      445,  239,  239,  446,  771,  239,  239,  503,  448,  482,
      239,  445,  239,  239,  447,  771,  239,  239,  239,  504,
      239,  239,  446,  771,  239,  239,  239,  448,  483,  205,

      239,  205,  425,  447,  239,  420,  422,  771,  239,  239,
      449,  484,  239,  450,  239,  239,  735,  239,  489,  239,
      239,  771,  239,  239,  452,  771,  451,  239,  239,  449,
      771,  239,  450,  239,  430,  735,  239,  489,  427,  239,
      239,  239,  490,  452,  453,  451,  239,  205,  239,  437,
      432,  735,  435,  425,  239,  771,  430,  491,  771,  239,
      455,  454,  239,  453,  771,  239,  771,  239,  437,  457,
      239,  437,  425,  239,  439,  430,  491,  458,  437,  455,
      454,  239,  412,  456,  455,  492,  771,  461,  457,  239,
      437,  432,  417,  439,  468,  415,  771,  468,  771,  771,

      439,  412,  485,  771,  475,  459,  461,  738,  422,  501,
      432,  417,  771,  468,  415,  462,  468,  270,  271,  469,
      460,  485,  469,  475,  486,  771,  738,  422,  501,  476,
      463,  464,  270,  271,  272,  437,  272,  420,  439,  503,
      272,  461,  735,  502,  465,  466,  272,  422,  430,  272,
      464,  272,  771,  499,  437,  272,  420,  439,  503,  771,
      461,  272,  771,  465,  466,  771,  422,  430,  505,  467,
      504,  272,  499,  272,  273,  270,  271,  480,  270,  271,
      501,  500,  771,  270,  271,  771,  272,  505,  272,  496,
      476,  511,  272,  469,  272,  272,  479,  272,  272,  501,

      272,  272,  272,  272,  272,  771,  272,  272,  496,  476,
      511,  505,  272,  497,  502,  481,  269,  771,  771,  771,
      771,  512,  269,  270,  271,  272,  270,  271,  771,  272,
      505,  272,  272,  276,  272,  269,  469,  272,  269,  272,
      272,  269,  272,  272,  269,  272,  272,  270,  271,  272,
      771,  771,  272,  771,  506,  272,  272,  269,  771,  511,
      771,  771,  487,  269,  272,  771,  272,  270,  271,  269,
      272,  771,  486,  507,  508,  269,  272,  272,  511,  272,
      272,  484,  272,  513,  272,  517,  272,  525,  269,  512,
      272,  486,  472,  508,  488,  272,  272,  272,  515,  476,

      509,  272,  514,  272,  517,  771,  525,  492,  269,  497,
      269,  490,  495,  492,  269,  484,  269,  515,  504,  510,
      486,  272,  771,  272,  270,  271,  492,  269,  497,  269,
      490,  495,  272,  498,  771,  493,  272,  272,  479,  771,
      502,  473,  500,  272,  504,  269,  771,  272,  516,  269,
      269,  269,  771,  272,  469,  269,  269,  771,  272,  502,
      472,  500,  518,  504,  269,  519,  512,  516,  269,  269,
      500,  269,  490,  469,  502,  504,  520,  269,  272,  474,
      272,  518,  521,  495,  519,  512,  521,  272,  272,  497,
      269,  502,  525,  476,  742,  520,  512,  771,  771,  771,

      269,  521,  523,  272,  500,  521,  269,  269,  771,  771,
      502,  525,  476,  742,  272,  771,  502,  272,  528,  269,
      502,  523,  269,  504,  545,  524,  469,  269,  490,  742,
      269,  495,  272,  269,  537,  272,  269,  538,  487,  502,
      539,  469,  504,  545,  540,  269,  269,  490,  269,  269,
      495,  269,  526,  537,  269,  269,  538,  484,  502,  539,
      545,  504,  272,  540,  269,  540,  480,  269,  538,  540,
      484,  538,  529,  527,  771,  269,  497,  538,  771,  269,
      272,  269,  486,  542,  502,  479,  540,  504,  543,  561,
      547,  529,  771,  269,  269,  497,  538,  548,  269,  269,

      530,  486,  542,  502,  531,  540,  504,  543,  561,  547,
      771,  541,  269,  771,  540,  549,  548,  543,  527,  532,
      771,  771,  543,  502,  548,  487,  504,  560,  545,  529,
      543,  548,  533,  534,  549,  486,  495,  550,  535,  553,
      771,  553,  502,  550,  484,  504,  560,  545,  529,  543,
      554,  533,  534,  548,  486,  495,  550,  536,  553,  550,
      553,  538,  555,  558,  546,  550,  553,  556,  553,  554,
      557,  559,  548,  771,  771,  562,  563,  771,  550,  564,
      555,  555,  558,  565,  566,  771,  556,  551,  567,  557,
      559,  569,  555,  559,  562,  563,  557,  771,  564,  557,

      568,  559,  565,  566,  565,  570,  571,  567,  565,  543,
      569,  572,  545,  574,  771,  771,  550,  572,  548,  568,
      684,  555,  557,  771,  570,  571,  771,  553,  559,  557,
      572,  771,  574,  543,  557,  555,  572,  580,  553,  684,
      572,  557,  540,  559,  771,  572,  684,  559,  557,  545,
      555,  573,  543,  553,  555,  545,  580,  553,  575,  587,
      540,  540,  585,  550,  753,  577,  771,  576,  545,  555,
      771,  580,  553,  771,  545,  771,  602,  771,  587,  540,
      577,  585,  550,  753,  587,  579,  771,  771,  754,  212,
      592,  578,  545,  584,  581,  602,  585,  212,  582,  557,

      550,  553,  212,  540,  590,  585,  602,  771,  212,  592,
      212,  545,  584,  581,  587,  586,  212,  582,  557,  550,
      553,  212,  540,  590,  585,  771,  592,  585,  583,  212,
      592,  771,  590,  587,  586,  771,  595,  212,  590,  588,
      587,  589,  212,  771,  591,  212,  771,  771,  771,  592,
      212,  590,  771,  771,  212,  595,  212,  212,  594,  597,
      589,  212,  212,  591,  212,  212,  593,  596,  771,  212,
      595,  604,  612,  212,  212,  590,  212,  594,  597,  595,
      592,  212,  212,  600,  212,  597,  596,  597,  212,  600,
      604,  612,  595,  212,  771,  597,  212,  612,  595,  599,

      604,  212,  600,  212,  597,  606,  212,  212,  600,  212,
      600,  212,  205,  598,  212,  212,  600,  601,  599,  212,
      638,  239,  212,  212,  606,  212,  600,  605,  212,  239,
      212,  212,  603,  212,  771,  606,  601,  771,  212,  639,
      239,  205,  212,  771,  205,  239,  605,  602,  239,  607,
      212,  603,  239,  239,  239,  771,  640,  606,  609,  205,
      239,  604,  239,  771,  239,  608,  638,  239,  607,  610,
      771,  239,  239,  239,  239,  239,  771,  609,  771,  239,
      771,  239,  239,  585,  608,  639,  239,  611,  610,  239,
      587,  239,  590,  239,  239,  613,  239,  239,  771,  239,

      615,  239,  640,  239,  239,  592,  611,  771,  239,  239,
      239,  239,  612,  614,  613,  239,  239,  239,  239,  615,
      771,  771,  239,  239,  771,  239,  619,  600,  239,  595,
      239,  239,  614,  616,  205,  771,  239,  771,  239,  239,
      617,  597,  618,  619,  239,  619,  239,  205,  604,  771,
      239,  771,  616,  771,  606,  604,  239,  239,  239,  617,
      619,  618,  619,  602,  621,  239,  650,  604,  771,  604,
      590,  771,  771,  606,  604,  239,  619,  620,  602,  587,
      592,  600,  592,  621,  622,  650,  627,  602,  597,  590,
      600,  631,  771,  587,  606,  771,  651,  602,  587,  592,

      600,  592,  771,  771,  623,  627,  602,  597,  624,  600,
      631,  771,  587,  771,  633,  771,  625,  624,  626,  633,
      627,  592,  272,  628,  272,  632,  632,  629,  604,  597,
      600,  771,  587,  633,  648,  269,  771,  634,  633,  634,
      592,  269,  628,  269,  634,  632,  629,  604,  597,  600,
      272,  587,  636,  648,  269,  272,  634,  630,  693,  632,
      632,  649,  634,  634,  771,  771,  272,  771,  634,  269,
      637,  636,  643,  771,  269,  771,  771,  693,  632,  269,
      771,  272,  634,  641,  684,  269,  637,  634,  634,  637,
      272,  643,  641,  635,  269,  272,  643,  641,  269,  637,

      269,  645,  640,  269,  637,  654,  644,  771,  269,  269,
      771,  640,  656,  269,  269,  643,  640,  771,  637,  640,
      645,  272,  269,  771,  654,  644,  272,  269,  640,  646,
      644,  656,  771,  642,  269,  655,  646,  272,  272,  269,
      269,  644,  644,  771,  644,  269,  632,  771,  646,  272,
      269,  269,  272,  269,  771,  646,  269,  269,  269,  644,
      644,  644,  269,  649,  646,  269,  272,  646,  269,  269,
      269,  269,  771,  272,  771,  644,  647,  649,  272,  269,
      272,  269,  649,  771,  269,  269,  269,  269,  771,  771,
      649,  269,  269,  269,  272,  652,  649,  269,  269,  269,

      771,  771,  651,  771,  649,  269,  272,  269,  657,  272,
      269,  269,  269,  269,  652,  653,  269,  655,  269,  269,
      657,  651,  269,  658,  653,  269,  269,  657,  269,  659,
      659,  661,  651,  634,  653,  663,  655,  771,  269,  657,
      272,  269,  658,  663,  653,  634,  771,  655,  660,  660,
      661,  664,  667,  662,  663,  665,  662,  637,  771,  269,
      771,  666,  663,  771,  668,  640,  640,  771,  771,  644,
      664,  667,  662,  771,  665,  684,  771,  644,  662,  646,
      666,  653,  649,  668,  272,  671,  272,  272,  669,  272,
      669,  651,  681,  637,  684,  653,  771,  269,  669,  269,

      269,  684,  634,  269,  671,  269,  269,  669,  269,  669,
      771,  681,  637,  272,  653,  655,  269,  682,  269,  269,
      272,  634,  669,  272,  670,  269,  269,  673,  655,  653,
      272,  651,  269,  269,  649,  771,  269,  771,  651,  269,
      771,  649,  269,  269,  771,  269,  771,  655,  653,  269,
      651,  269,  269,  649,  272,  269,  641,  651,  672,  771,
      649,  674,  269,  272,  646,  641,  272,  269,  674,  682,
      677,  682,  771,  269,  685,  640,  634,  771,  272,  269,
      641,  686,  269,  646,  640,  269,  269,  694,  682,  677,
      682,  634,  675,  685,  682,  634,  682,  269,  269,  640,

      686,  676,  771,  688,  677,  686,  694,  771,  771,  771,
      634,  771,  686,  771,  771,  771,  676,  272,  686,  641,
      689,  678,  688,  691,  692,  679,  653,  646,  649,  686,
      634,  690,  695,  689,  684,  771,  269,  689,  640,  689,
      678,  771,  691,  692,  679,  653,  646,  649,  686,  634,
      690,  695,  689,  684,  689,  680,  682,  692,  692,  682,
      687,  686,  682,  689,  212,  771,  689,  689,  771,  771,
      698,  771,  212,  771,  771,  771,  771,  754,  682,  771,
      686,  682,  689,  212,  682,  689,  698,  682,  686,  698,
      212,  212,  686,  684,  682,  698,  754,  689,  212,  771,

      771,  754,  205,  697,  689,  698,  212,  686,  212,  212,
      700,  698,  684,  682,  212,  771,  212,  212,  212,  696,
      771,  702,  697,  705,  212,  212,  212,  212,  698,  700,
      699,  701,  212,  212,  702,  212,  700,  212,  771,  700,
      702,  771,  705,  212,  205,  212,  205,  212,  771,  699,
      701,  212,  702,  702,  771,  212,  700,  705,  700,  212,
      212,  771,  702,  239,  239,  703,  212,  212,  212,  212,
      771,  239,  239,  704,  212,  702,  239,  212,  212,  212,
      719,  708,  239,  239,  239,  205,  212,  212,  212,  706,
      239,  239,  704,  771,  702,  239,  212,  205,  205,  719,

      708,  205,  205,  239,  239,  239,  702,  705,  706,  707,
      239,  720,  239,  239,  698,  708,  705,  239,  239,  239,
      771,  771,  709,  239,  239,  239,  710,  239,  707,  239,
      771,  239,  239,  771,  771,  705,  239,  239,  239,  239,
      771,  709,  205,  708,  239,  710,  239,  239,  700,  698,
      705,  239,  239,  705,  771,  205,  698,  702,  239,  239,
      239,  239,  771,  722,  771,  711,  239,  700,  698,  239,
      239,  239,  705,  771,  698,  698,  771,  205,  239,  239,
      239,  698,  722,  272,  711,  713,  700,  705,  239,  205,
      205,  771,  705,  700,  771,  702,  269,  723,  771,  705,

      700,  698,  269,  272,  713,  272,  771,  771,  771,  724,
      714,  705,  272,  715,  702,  269,  714,  272,  714,  700,
      698,  269,  269,  771,  269,  269,  712,  272,  724,  272,
      269,  269,  716,  771,  714,  714,  269,  714,  771,  717,
      269,  714,  269,  714,  269,  272,  269,  272,  269,  269,
      269,  771,  771,  771,  720,  269,  272,  718,  269,  269,
      269,  269,  771,  720,  269,  269,  269,  269,  718,  269,
      725,  272,  771,  720,  771,  269,  717,  269,  272,  269,
      272,  727,  720,  717,  269,  720,  771,  717,  269,  725,
      269,  269,  272,  269,  721,  730,  723,  269,  771,  269,

      728,  771,  729,  269,  726,  269,  272,  717,  771,  269,
      269,  269,  269,  272,  730,  723,  269,  726,  269,  269,
      771,  729,  272,  771,  269,  269,  269,  272,  771,  723,
      723,  723,  269,  720,  272,  269,  726,  771,  269,  272,
      269,  269,  272,  272,  269,  269,  269,  714,  732,  720,
      723,  726,  269,  269,  269,  269,  714,  272,  269,  269,
      269,  269,  269,  771,  771,  723,  714,  732,  720,  733,
      269,  269,  714,  272,  269,  714,  269,  269,  272,  733,
      720,  714,  723,  735,  737,  718,  269,  733,  733,  269,
      735,  269,  269,  771,  733,  269,  771,  269,  771,  771,

      733,  723,  735,  737,  717,  269,  733,  771,  771,  735,
      269,  717,  212,  733,  771,  733,  723,  272,  736,  212,
      212,  723,  740,  771,  720,  736,  739,  212,  771,  718,
      714,  212,  771,  771,  771,  771,  269,  771,  212,  212,
      723,  740,  771,  720,  212,  739,  212,  741,  717,  714,
      205,  762,  212,  740,  742,  731,  212,  740,  740,  239,
      239,  771,  771,  212,  212,  771,  741,  239,  239,  771,
      762,  212,  771,  742,  771,  212,  763,  740,  239,  239,
      771,  771,  742,  212,  239,  239,  239,  239,  745,  743,
      771,  744,  239,  239,  205,  742,  272,  205,  205,  740,

      239,  746,  746,  239,  239,  771,  748,  745,  239,  269,
      744,  239,  239,  771,  742,  269,  752,  771,  740,  239,
      746,  746,  740,  742,  272,  748,  272,  239,  269,  272,
      743,  747,  747,  747,  269,  752,  747,  269,  205,  269,
      771,  749,  269,  269,  272,  269,  272,  749,  269,  749,
      747,  749,  751,  747,  771,  747,  269,  269,  269,  269,
      272,  269,  747,  269,  269,  269,  749,  747,  749,  751,
      771,  751,  747,  269,  771,  771,  269,  754,  269,  269,
      771,  771,  749,  747,  750,  755,  272,  757,  751,  749,
      771,  771,  269,  747,  771,  212,  754,  771,  269,  269,

      747,  754,  212,  212,  755,  269,  757,  757,  749,  754,
      212,  757,  747,  759,  212,  771,  756,  239,  269,  771,
      239,  212,  212,  771,  750,  239,  757,  771,  239,  212,
      272,  757,  759,  205,  758,  756,  239,  760,  272,  239,
      757,  771,  761,  269,  239,  771,  272,  239,  763,  269,
      764,  269,  760,  758,  771,  205,  771,  269,  757,  269,
      760,  761,  269,  766,  212,  269,  760,  763,  269,  764,
      269,  760,  212,  763,  768,  763,  760,  765,  269,  760,
      771,  239,  766,  212,  760,  272,  770,  212,  766,  239,
      771,  212,  771,  768,  767,  212,  765,  272,  769,  769,

      239,  239,  766,  771,  269,  770,  212,  771,  239,  239,
      269,  769,  771,  767,  212,  771,  269,  769,  771,  766,
      239,  771,  771,  769,  771,  205,  771,  771,  239,  269,
      771,  771,  771,  771,  771,  269,  771,  771,  771,  205,
      205,  771,  771,  205,  212,  771,  771,  212,  239,  771,
      771,  239,  269,  269,  269,  269,  349,  771,  349,  349,
        7,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771
    } ;

static yyconst flex_int16_t yy_chk[3822] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       23,   27,  773,   28,   29,  772,   31,   23,   28,   27,
       35,   30,   31,   33,   66,   30,  208,   34,   32,   30,

       27,   66,   28,   29,   32,   31,  206,   28,   27,   35,
       30,   31,   33,   28,   30,   29,   34,   32,   30,   27,
       31,   36,   35,   32,   30,   34,   33,   38,   39,   40,
      144,   45,   32,   39,  140,   38,   40,   41,   42,   67,
       36,   41,   44,   43,   42,   41,   38,   39,   40,   43,
       45,   63,   39,   36,   38,   40,   41,   42,   39,   45,
       41,   44,   43,   42,   41,   38,   76,   40,   43,   47,
       41,   76,   42,   46,   76,   44,   57,   43,  116,   46,
       55,  159,   53,  116,   24,   76,   20,   17,   47,   14,
       76,   12,   46,   76,    9,    7,    0,  116,   46,  115,

      159,   47,  116,  159,   76,   46,   49,  115,  116,   71,
       49,   49,   49,   49,   49,   49,   49,   71,  115,   49,
      117,  164,   71,    0,  547,   49,  115,    0,   71,   49,
       49,   49,   49,   49,   49,   49,   71,  115,   49,  117,
      164,   71,  164,  547,   49,   69,   69,   71,   69,  121,
      547,  117,   69,   69,   69,   69,   69,   72,   69,   69,
       69,   69,   69,   69,   72,   72,  188,  118,  121,   74,
      193,  118,   78,   74,    0,  118,   72,   74,   78,   74,
       78,    0,  121,   72,   72,  188,  118,  188,   74,  193,
      118,   78,   74,  193,  118,   72,   74,   78,   74,   78,

      118,   69,   69,   69,   69,   70,   70,   74,   70,  132,
       78,  161,   70,   70,   70,   70,   70,   77,   70,   70,
       70,   70,   70,   70,   70,   77,  122,   77,  132,   75,
      161,  128,   70,   75,  149,  161,   77,   75,  128,   75,
        0,   79,  132,   70,   77,  122,   77,   79,   75,   79,
      128,   70,   75,  149,  122,   77,   75,  128,   75,  149,
       79,   70,   70,   70,   70,   73,   79,   75,   79,  128,
       73,  152,   85,   73,   73,  119,   85,    0,   73,   79,
       85,  119,   85,  332,   73,    0,    0,    0,    0,   73,
      152,   85,   73,   73,  119,   85,  152,   73,    0,   85,

      119,   85,  332,   73,   80,   80,  332,   80,  123,  119,
       85,   80,   80,   80,   80,   80,   82,   80,   80,   80,
       80,   80,   80,  133,   82,  120,  124,  123,   87,   82,
       83,  120,    0,   87,  685,   82,   87,   83,   83,    0,
      123,    0,  133,   82,  120,  124,    0,   87,   82,   83,
      120,  133,   87,  685,   82,   87,   83,   83,  124,  120,
       80,   80,   80,   80,   81,   81,   87,   81,   83,  685,
      165,   81,   81,   81,   81,   81,   88,   81,   81,   81,
       81,   81,   81,   81,   88,  162,   88,    0,   86,  165,
      169,   81,   86,    0,  165,   88,   86,    0,   86,    0,

       89,    0,   81,   88,  162,   88,   89,   86,   89,  169,
       81,   86,   89,  162,   88,   86,    0,   86,  169,   89,
       81,   81,   81,   81,   84,   89,   86,   89,   90,   84,
        0,   89,   84,   84,   90,  127,   90,   84,   89,  176,
      127,  126,    0,   84,  130,    0,    0,   90,   84,  126,
      130,   84,   84,   90,  127,   90,   84,    0,  176,  127,
      126,    0,   84,  130,  176,  127,   90,   92,  126,  130,
      135,   92,   92,   92,   92,   92,   92,   92,  130,  126,
       92,   95,   95,   96,   96,   96,   92,  150,    0,  135,
       92,   92,   92,   92,   92,   92,   92,  158,   95,   92,

       95,   96,  135,   96,   95,   92,  150,   96,    0,    0,
       95,    0,    0,   96,    0,    0,  158,    0,    0,    0,
        0,    0,   99,   99,  153,  150,   99,  100,  100,  158,
      101,  101,    0,  101,    0,   95,  131,   95,   96,   99,
       96,   99,  131,  153,  100,   99,  100,  101,  367,  101,
      100,   99,    0,  101,  163,  131,  100,    0,  163,  101,
        0,  131,  153,    0,    0,    0,    0,  367,  102,  102,
      131,  103,  103,  163,    0,  367,   99,  163,   99,  104,
      104,  100,  163,  100,  101,  102,  101,  102,  103,    0,
      103,  102,  105,  105,  103,    0,  104,  102,  104,    0,

      103,    0,  104,    0,  180,    0,    0,  171,  104,  105,
        0,  105,  134,  106,  106,  105,    0,    0,  134,    0,
        0,  105,  102,  180,  102,  103,  171,  103,  107,  107,
      106,  134,  106,  104,  180,  104,  106,  134,  107,  108,
      108,  171,  106,    0,  134,  107,  105,  107,  105,    0,
        0,  107,    0,  151,  109,  109,  108,  107,  108,  170,
      357,    0,  108,    0,    0,    0,  151,  106,  108,  106,
      160,  109,  151,  109,    0,  111,  111,  109,  170,  357,
      160,  172,  107,  109,  107,  151,    0,  170,  154,  160,
      111,  151,  111,  108,  111,  108,  357,    0,  111,  160,

      172,  154,  160,    0,  111,  173,    0,  154,  109,    0,
      109,  110,  110,  177,    0,  172,  112,  112,  110,  129,
      154,    0,  174,  129,  173,  110,  154,  129,  110,  111,
      110,  111,  177,  112,  110,  112,  173,  178,  129,  112,
      110,  174,  129,    0,  166,  112,  129,  166,    0,    0,
      298,  177,  129,  174,    0,    0,  178,    0,    0,    0,
        0,    0,  178,  166,    0,  110,  166,  110,  166,  298,
      112,  298,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  136,  136,  179,    0,    0,  138,  138,

      184,  139,  139,    0,  182,    0,  185,  186,    0,    0,
      136,    0,  136,    0,  179,  138,  136,  138,  139,  184,
      139,  138,  136,  182,  139,  185,  186,  138,  185,  189,
      139,  186,  184,  179,  182,    0,    0,  187,    0,  195,
      191,  196,    0,    0,  192,  283,    0,  136,  189,  136,
      137,  137,  138,  189,  138,  139,  187,  139,  195,  191,
      196,    0,  260,  192,  283,  187,  196,  137,  191,  137,
      195,  137,  137,  137,  137,  137,  137,  137,  192,  137,
      137,  260,    0,  283,  201,    0,  137,  260,    0,  194,
      137,  137,  137,  137,  137,  137,  137,    0,  197,  137,

      194,  197,  200,  201,  137,  137,  137,  199,  194,  202,
      199,  203,  334,  202,  234,  200,  201,  197,    0,  194,
      197,  200,  197,  194,    0,  236,  199,  203,  202,  199,
      203,  334,  202,  234,  200,  334,  265,  202,    0,  215,
      200,  199,  234,  212,  236,    0,  203,    0,    0,  203,
      204,  212,  215,  214,  204,  265,  204,  204,  215,  236,
      204,  214,  212,  204,  204,    0,  204,  204,  265,  204,
      212,  215,  214,  204,    0,  204,  204,  215,    0,  204,
      214,  212,  204,  204,  213,  204,  204,  216,  204,  218,
      217,  214,  213,  219,    0,  216,  221,  213,  217,  222,

      216,  219,  218,  213,  221,  222,  216,  222,  218,  217,
        0,  213,  219,  238,  216,  221,  213,  217,  222,  216,
      219,  218,  213,  221,  222,  216,  222,  218,  217,  224,
      223,  219,  238,  225,  221,  226,    0,  222,  223,  224,
        0,  225,    0,  226,  238,  226,  223,  225,  224,  223,
        0,  227,  225,    0,  226,  227,  287,  223,  224,  228,
      225,  224,  226,    0,  226,  223,  225,  228,  223,  229,
      227,  225,  231,  226,  227,  287,  228,  229,  228,  227,
      231,  230,  233,  229,  230,  235,  228,    0,  229,  235,
      233,  231,  233,  235,  287,  228,  229,  228,    0,  231,

      230,  233,  229,  230,  235,  230,  237,  229,  235,  233,
      231,  233,  235,  237,  237,    0,  239,    0,  240,  241,
      233,  242,  243,  235,  239,  237,  240,  241,  244,  242,
      243,  240,  237,  237,  242,  239,  244,  240,  241,    0,
      242,  243,    0,  239,  237,  240,  241,  244,  242,  243,
      240,  246,    0,  242,  239,  244,  240,  241,  308,  242,
      243,  245,    0,  247,  250,    0,  244,  248,  249,  245,
      246,  247,  250,  248,    0,  248,  249,  308,  250,  292,
      245,  246,  247,  250,  249,    0,  248,  249,  245,  308,
      247,  250,  248,    0,  248,  249,  252,  250,  292,  245,

      251,  247,  250,  249,  252,  248,  249,    0,  251,  254,
      251,  292,  253,  252,  255,  252,  686,  254,  295,  251,
      253,    0,  255,  252,  255,    0,  253,  251,  254,  251,
        0,  253,  252,  255,  252,  686,  254,  295,  251,  253,
      256,  255,  295,  255,  256,  253,  257,  254,  256,  258,
      253,  686,  255,  261,  257,    0,  261,  296,    0,  256,
      258,  257,  259,  256,    0,  257,    0,  256,  258,  259,
      259,  263,  261,  257,  263,  261,  296,  261,  256,  258,
      257,  259,  264,  258,  257,  296,    0,  266,  259,  259,
      263,  266,  267,  263,  282,  264,    0,  284,    0,    0,

      259,  264,  293,    0,  286,  263,  266,  694,  267,  305,
      266,  267,    0,  282,  264,  266,  284,  269,  269,  282,
      264,  293,  284,  286,  293,    0,  694,  267,  305,  286,
      267,  268,  272,  272,  269,  268,  269,  268,  268,  309,
      269,  268,  694,  305,  268,  268,  269,  268,  268,  272,
      268,  272,    0,  303,  268,  272,  268,  268,  309,    0,
      268,  272,    0,  268,  268,    0,  268,  268,  313,  268,
      309,  269,  303,  269,  273,  273,  273,  288,  274,  274,
      306,  303,    0,  275,  275,    0,  272,  313,  272,  299,
      288,  318,  273,  313,  273,  274,  288,  274,  273,  306,

      275,  274,  275,  290,  273,    0,  275,  274,  299,  288,
      318,  315,  275,  299,  306,  288,  290,    0,    0,    0,
        0,  318,  290,  276,  276,  302,  277,  277,    0,  273,
      315,  273,  274,  276,  274,  290,  315,  275,  302,  275,
      276,  290,  276,  277,  302,  277,  276,  278,  278,  277,
        0,    0,  276,    0,  314,  277,  294,  302,    0,  320,
        0,    0,  294,  302,  278,    0,  278,  279,  279,  294,
      278,    0,  294,  314,  316,  294,  278,  276,  320,  276,
      277,  294,  277,  323,  279,  326,  279,  336,  294,  320,
      279,  294,  314,  316,  294,  300,  279,  297,  324,  316,

      317,  278,  323,  278,  326,    0,  336,  297,  300,  300,
      297,  297,  300,  326,  300,  323,  297,  324,  336,  317,
      324,  279,    0,  279,  285,  285,  297,  300,  300,  297,
      297,  300,  304,  300,    0,  297,  307,  310,  317,    0,
      307,  285,  304,  285,  310,  304,    0,  285,  325,  307,
      310,  304,    0,  285,  285,  307,  310,    0,  321,  307,
      285,  304,  327,  310,  304,  328,  321,  325,  307,  310,
      304,  321,  325,  285,  307,  310,  330,  321,  285,  285,
      285,  327,  331,  327,  328,  321,  333,  335,  338,  328,
      321,  335,  337,  342,  702,  330,  321,    0,    0,    0,

      335,  331,  335,  346,  330,  333,  335,  338,    0,    0,
      335,  337,  342,  702,  339,    0,  331,  340,  342,  335,
      333,  335,  346,  337,  358,  335,  338,  339,  339,  702,
      340,  339,  343,  339,  350,  341,  340,  351,  343,  341,
      352,  346,  341,  358,  353,  343,  339,  339,  341,  340,
      339,  343,  339,  350,  341,  340,  351,  343,  341,  352,
      358,  341,  344,  353,  343,  352,  345,  341,  350,  353,
      343,  351,  344,  341,    0,  344,  344,  354,    0,  345,
      347,  344,  345,  355,  347,  345,  354,  347,  356,  382,
      360,  344,    0,  347,  344,  344,  354,  361,  345,  347,

      344,  345,  355,  347,  345,  354,  347,  356,  382,  360,
        0,  354,  347,    0,  382,  362,  361,  355,  347,  348,
        0,    0,  356,  348,  360,  348,  348,  381,  359,  348,
      359,  361,  348,  348,  362,  348,  348,  363,  348,  368,
        0,  369,  348,  362,  348,  348,  381,  359,  348,  359,
      375,  348,  348,  364,  348,  348,  363,  348,  368,  364,
      369,  381,  376,  379,  359,  363,  368,  377,  369,  375,
      378,  380,  364,    0,    0,  383,  384,    0,  364,  385,
      375,  376,  379,  386,  387,    0,  377,  364,  388,  378,
      380,  393,  376,  379,  383,  384,  377,    0,  385,  378,

      390,  380,  386,  387,  385,  394,  395,  388,  386,  383,
      393,  396,  384,  398,    0,    0,  388,  397,  387,  390,
      548,  393,  397,    0,  394,  395,    0,  390,  400,  400,
      396,    0,  398,  401,  394,  402,  397,  406,  402,  548,
      395,  397,  401,  398,    0,  396,  548,  400,  400,  405,
      403,  397,  401,  403,  402,  404,  406,  402,  400,  412,
      405,  401,  410,  404,  732,  402,    0,  401,  405,  403,
        0,  406,  403,    0,  404,    0,  435,    0,  412,  405,
      403,  410,  404,  732,  412,  405,    0,    0,  732,  409,
      417,  404,  408,  409,  408,  435,  410,  409,  408,  408,

      408,  408,  411,  408,  415,  413,  435,    0,  409,  417,
      411,  408,  409,  408,  413,  411,  409,  408,  408,  408,
      408,  411,  408,  415,  413,    0,  417,  409,  408,  411,
      418,    0,  418,  413,  411,    0,  420,  414,  415,  413,
      411,  414,  416,    0,  416,  414,    0,    0,    0,  418,
      416,  418,    0,    0,  419,  420,  414,  421,  419,  422,
      414,  416,  419,  416,  414,  421,  418,  421,    0,  416,
      420,  437,  445,  419,  424,  414,  421,  419,  422,  423,
      416,  419,  424,  427,  421,  423,  421,  422,  426,  428,
      437,  445,  419,  424,    0,  421,  426,  445,  423,  426,

      437,  424,  427,  429,  423,  439,  431,  426,  428,  434,
      427,  429,  424,  423,  431,  426,  428,  434,  426,  438,
      477,  448,  429,  436,  439,  431,  426,  438,  434,  448,
      429,  436,  436,  431,    0,  439,  434,    0,  438,  477,
      448,  429,  436,    0,  431,  440,  438,  434,  448,  440,
      436,  436,  441,  440,  442,    0,  477,  438,  442,  448,
      441,  436,  442,    0,  440,  441,  478,  443,  440,  443,
        0,  441,  440,  442,  444,  443,    0,  442,    0,  441,
        0,  442,  444,  440,  441,  478,  443,  444,  443,  449,
      441,  446,  442,  444,  443,  446,  450,  449,    0,  446,

      449,  444,  478,  447,  450,  443,  444,    0,  449,  451,
      446,  447,  444,  447,  446,  450,  449,  451,  446,  449,
        0,    0,  447,  450,    0,  452,  455,  449,  451,  446,
      447,  453,  447,  452,  450,    0,  451,    0,  454,  453,
      453,  447,  454,  456,  452,  455,  454,  451,  456,    0,
      453,    0,  452,    0,  459,  459,  457,  454,  453,  453,
      455,  454,  456,  452,  457,  454,  499,  456,    0,  453,
      460,    0,    0,  459,  459,  457,  454,  456,  461,  460,
      463,  461,  464,  457,  459,  499,  465,  462,  463,  460,
      462,  468,    0,  464,  457,    0,  499,  461,  460,  463,

      461,  464,    0,    0,  460,  465,  462,  463,  461,  462,
      468,    0,  464,    0,  470,    0,  463,  462,  464,  471,
      465,  467,  469,  467,  472,  468,  469,  467,  467,  467,
      467,    0,  467,  470,  491,  469,    0,  472,  471,  470,
      467,  469,  467,  472,  471,  469,  467,  467,  467,  467,
      473,  467,  475,  491,  469,  474,  472,  467,  566,  474,
      469,  491,  472,  473,    0,    0,  476,    0,  474,  473,
      476,  475,  482,    0,  474,    0,    0,  566,  474,  476,
        0,  479,  473,  479,  566,  476,  475,  474,  473,  476,
      480,  482,  480,  474,  479,  481,  483,  481,  476,  481,

      479,  485,  479,  480,  476,  503,  482,    0,  481,  480,
        0,  480,  505,  479,  481,  483,  481,    0,  481,  479,
      485,  484,  480,    0,  503,  484,  486,  481,  480,  485,
      483,  505,    0,  481,  484,  503,  486,  487,  488,  486,
      484,  487,  488,    0,  484,  486,  505,    0,  488,  490,
      487,  488,  492,  484,    0,  486,  487,  488,  486,  484,
      487,  488,  490,  492,  486,  492,  493,  488,  490,  487,
      488,  492,    0,  495,    0,  487,  488,  493,  497,  493,
      498,  490,  492,    0,  492,  493,  495,  490,    0,    0,
      492,  497,  495,  498,  500,  501,  493,  497,  493,  498,

        0,    0,  500,    0,  493,  495,  502,  500,  506,  504,
      497,  495,  498,  500,  501,  502,  497,  504,  498,  502,
      507,  500,  504,  508,  501,  502,  500,  506,  504,  509,
      510,  511,  500,  506,  502,  513,  504,    0,  502,  507,
      512,  504,  508,  514,  502,  507,    0,  504,  509,  510,
      511,  515,  521,  512,  513,  517,  511,  508,    0,  512,
        0,  520,  514,    0,  522,  509,  510,    0,    0,  513,
      515,  521,  512,    0,  517,  581,    0,  514,  512,  515,
      520,  521,  517,  522,  523,  525,  524,  526,  523,  528,
      524,  520,  539,  528,  581,  524,    0,  523,  522,  524,

      526,  581,  528,  523,  525,  524,  526,  523,  528,  524,
        0,  539,  528,  534,  524,  525,  523,  539,  524,  526,
      527,  528,  523,  529,  524,  526,  534,  528,  527,  527,
      530,  529,  534,  527,  529,    0,  529,    0,  530,  527,
        0,  530,  529,  530,    0,  534,    0,  527,  527,  530,
      529,  534,  527,  529,  531,  529,  531,  530,  527,    0,
      530,  529,  530,  532,  531,  532,  533,  531,  530,  540,
      533,  541,    0,  531,  549,  531,  532,    0,  535,  533,
      535,  550,  532,  531,  532,  533,  531,  567,  540,  533,
      541,  535,  531,  549,  540,  532,  541,  535,  533,  535,

      550,  532,    0,  558,  533,  549,  567,    0,    0,    0,
      535,    0,  550,    0,    0,    0,  535,  536,  567,  536,
      559,  536,  558,  564,  565,  536,  536,  536,  536,  551,
      536,  561,  574,  575,  551,    0,  536,  558,  536,  559,
      536,    0,  564,  565,  536,  536,  536,  536,  551,  536,
      561,  574,  575,  551,  559,  536,  561,  564,  565,  576,
      551,  578,  579,  582,  584,    0,  574,  575,    0,    0,
      587,    0,  584,    0,    0,    0,    0,  733,  576,    0,
      578,  579,  582,  584,  576,  583,  588,  579,  583,  587,
      586,  584,  578,  583,  583,  587,  733,  582,  586,    0,

        0,  733,  584,  586,  583,  588,  589,  583,  591,  586,
      595,  588,  583,  583,  589,    0,  591,  586,  594,  583,
        0,  597,  586,  606,  596,  589,  594,  591,  586,  595,
      594,  596,  596,  589,  598,  591,  595,  594,    0,  598,
      597,    0,  606,  596,  589,  594,  591,  599,    0,  594,
      596,  596,  597,  598,    0,  599,  594,  606,  598,  601,
      603,    0,  596,  607,  609,  598,  599,  601,  603,  605,
        0,  607,  609,  605,  599,  625,  608,  605,  601,  603,
      645,  612,  607,  609,  608,  599,  601,  603,  605,  608,
      607,  609,  605,    0,  625,  608,  605,  601,  603,  645,

      612,  607,  609,  608,  610,  611,  625,  605,  608,  611,
      613,  645,  610,  611,  608,  612,  622,  615,  613,  614,
        0,    0,  613,  610,  611,  615,  614,  614,  611,  613,
        0,  610,  611,    0,    0,  622,  615,  613,  614,  616,
        0,  613,  610,  611,  615,  614,  614,  616,  613,  623,
      622,  617,  618,  629,    0,  615,  626,  614,  616,  617,
      618,  621,    0,  654,    0,  621,  616,  628,  623,  621,
      617,  618,  629,    0,  623,  626,    0,  616,  617,  618,
      621,  626,  654,  632,  621,  633,  628,  629,  621,  617,
      618,    0,  630,  628,    0,  630,  632,  654,    0,  621,

      630,  630,  632,  634,  633,  635,    0,    0,    0,  657,
      633,  630,  637,  643,  630,  632,  634,  640,  635,  630,
      630,  632,  634,    0,  635,  637,  630,  641,  657,  642,
      640,  637,  643,    0,  657,  634,  640,  635,    0,  643,
      641,  634,  642,  635,  637,  644,  641,  646,  642,  640,
      637,    0,    0,    0,  646,  640,  647,  644,  644,  641,
      646,  642,    0,  647,  644,  641,  646,  642,  647,  647,
      661,  649,    0,  646,    0,  647,  644,  644,  651,  646,
      653,  663,  647,  644,  649,  646,    0,  647,  647,  661,
      649,  651,  655,  653,  647,  671,  655,  651,    0,  653,

      663,    0,  664,  649,  661,  655,  669,  663,    0,  649,
      651,  655,  653,  662,  671,  655,  651,  662,  653,  669,
        0,  664,  670,    0,  655,  669,  662,  672,    0,  671,
      655,  672,  662,  664,  673,  670,  662,    0,  669,  674,
      672,  670,  675,  676,  669,  662,  672,  673,  683,  675,
      672,  662,  674,  673,  670,  675,  676,  677,  674,  672,
      670,  675,  676,    0,    0,  672,  673,  683,  675,  684,
      677,  674,  673,  678,  675,  676,  677,  674,  679,  683,
      675,  676,  679,  687,  693,  678,  678,  687,  684,  677,
      696,  679,  678,    0,  696,  677,    0,  679,    0,    0,

      684,  679,  687,  693,  678,  678,  687,    0,    0,  696,
      679,  678,  697,  696,    0,  693,  679,  680,  687,  699,
      697,  680,  700,    0,  680,  696,  699,  699,    0,  680,
      680,  697,    0,    0,    0,    0,  680,    0,  699,  697,
      680,  700,    0,  680,  701,  699,  699,  701,  680,  680,
      697,  753,  701,  700,  703,  680,  704,  699,  703,  706,
      707,    0,    0,  701,  704,    0,  701,  706,  707,    0,
      753,  701,    0,  703,    0,  704,  753,  703,  706,  707,
        0,    0,  701,  704,  709,  710,  706,  707,  710,  703,
        0,  709,  709,  710,  704,  712,  714,  706,  707,  712,

      711,  715,  716,  709,  710,    0,  719,  710,  711,  714,
      709,  709,  710,    0,  712,  714,  729,    0,  712,  711,
      715,  716,  709,  710,  717,  719,  723,  711,  714,  718,
      712,  717,  715,  716,  714,  729,  718,  717,  711,  723,
        0,  719,  718,  717,  720,  723,  721,  720,  718,  721,
      717,  729,  727,  721,    0,  718,  717,  720,  723,  721,
      726,  718,  717,  720,  723,  721,  720,  718,  721,  728,
        0,  727,  721,  726,    0,    0,  720,  736,  721,  726,
        0,    0,  720,  727,  721,  737,  731,  740,  728,  731,
        0,    0,  726,  731,    0,  741,  736,    0,  726,  731,

      728,  736,  739,  741,  737,  731,  740,  743,  731,  737,
      739,  740,  731,  746,  741,    0,  739,  745,  731,    0,
      744,  739,  741,    0,  731,  745,  743,    0,  744,  739,
      749,  743,  746,  741,  744,  739,  745,  746,  747,  744,
      739,    0,  751,  749,  745,    0,  750,  744,  754,  749,
      755,  747,  747,  744,    0,  745,    0,  747,  744,  750,
      750,  751,  749,  757,  756,  750,  751,  754,  749,  755,
      747,  747,  756,  754,  759,  755,  747,  756,  750,  750,
        0,  758,  757,  756,  750,  760,  761,  765,  757,  758,
        0,  756,    0,  759,  758,  765,  756,  769,  760,  759,

      758,  767,  756,    0,  760,  761,  765,    0,  758,  767,
      769,  761,    0,  758,  765,    0,  769,  760,    0,  758,
      767,    0,    0,  760,    0,  765,    0,    0,  767,  769,
        0,    0,    0,    0,    0,  769,    0,    0,    0,  767,
      774,    0,    0,  774,  775,    0,    0,  775,  776,    0,
        0,  776,  777,  777,  777,  777,  778,    0,  778,  778,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,

      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[57] =
    {   0,
       70,   71,   72,   73,   75,   77,   78,   79,   87,   88,
       89,   90,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  120,  121,
      122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
      132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
      143,  144,  145,  147,  148,  149
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#line 11 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;
bool eof = false;

void reset_state(){
    memset(string_buf, 0, sizeof(string_buf));
    string_buf_ptr = string_buf;
    BEGIN 0;
}

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */
int add_string(char *s);
int commentCounter = 0;

/*
 * Define names for regular expressions here.
 */

#line 1715 "cool-lex.cc"

#define INITIAL 0
#define COMMENT 1
#define STRING 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
/* %% [7.0] user's declarations go here */
#line 65 "cool.flex"


 /*
  *  Nested comments
  */
#line 2008 "cool-lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 772 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3761 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 57 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 57 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 58 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 70 "cool.flex"
{}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 71 "cool.flex"
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "cool.flex"
{}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "cool.flex"
{}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 75 "cool.flex"
{commentCounter--;if(commentCounter<0){cool_yylval.error_msg = "Unmatched *)"; return ERROR;} else if (commentCounter==0){BEGIN 0;}}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 76 "cool.flex"
{if (!eof){cool_yylval.error_msg = "EOF in comment";eof=true;return ERROR;}else{return 0;}}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "cool.flex"
{commentCounter++;BEGIN COMMENT;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "cool.flex"
{cool_yylval.error_msg = "Unmatched *)"; return ERROR;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "cool.flex"
{ }
	YY_BREAK
/*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */
case 9:
YY_RULE_SETUP
#line 87 "cool.flex"
{ int code = add_string(yytext ); if(code) return code; }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 88 "cool.flex"
{ int code = add_string(yytext); if (code) return code; }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 89 "cool.flex"
{ cool_yylval.error_msg = "asdf"; return ERROR;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 90 "cool.flex"
{ string_buf_ptr = string_buf; BEGIN STRING; }
	YY_BREAK
/*
  *  The multiple-character operators.
  */
case 13:
YY_RULE_SETUP
#line 97 "cool.flex"
{ return '+';  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 98 "cool.flex"
{ return '*';  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 99 "cool.flex"
{ return '-';  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "cool.flex"
{ return '~';  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "cool.flex"
{ return '/';  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 102 "cool.flex"
{ return ';';  }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 103 "cool.flex"
{ return '(';  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 104 "cool.flex"
{ return ')';  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 105 "cool.flex"
{ return '{';  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 106 "cool.flex"
{ return '}';  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 107 "cool.flex"
{ return ':';  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 108 "cool.flex"
{ return '.';  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 109 "cool.flex"
{ return '@';  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "cool.flex"
{ return '<';  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 111 "cool.flex"
{ return '=';  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 112 "cool.flex"
{ return ',';  }
	YY_BREAK
/*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */
case 29:
YY_RULE_SETUP
#line 120 "cool.flex"
{ cool_yylval.boolean = true ; return BOOL_CONST;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 121 "cool.flex"
{ cool_yylval.boolean = false; return BOOL_CONST;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "cool.flex"
{ return CLASS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 123 "cool.flex"
{ return ELSE;  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 124 "cool.flex"
{ return FI; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 125 "cool.flex"
{ return IF; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 126 "cool.flex"
{ return IN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 127 "cool.flex"
{ return INHERITS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 128 "cool.flex"
{ return LET; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 129 "cool.flex"
{ return LOOP; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 130 "cool.flex"
{ return POOL; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 131 "cool.flex"
{ return THEN; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 132 "cool.flex"
{ return WHILE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 133 "cool.flex"
{ return CASE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 134 "cool.flex"
{ return ESAC; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 135 "cool.flex"
{ return OF; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 136 "cool.flex"
{ return NEW; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 137 "cool.flex"
{ return ISVOID; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 138 "cool.flex"
{ return ASSIGN; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 139 "cool.flex"
{ return LE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 140 "cool.flex"
{ return DARROW; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 141 "cool.flex"
{ return NOT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 143 "cool.flex"
{ cool_yylval.symbol = stringtable.add_string(yytext); return OBJECTID;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 144 "cool.flex"
{ cool_yylval.symbol = stringtable.add_string(yytext); return TYPEID;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 145 "cool.flex"
{ cool_yylval.symbol = inttable.add_string(yytext); return INT_CONST;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 147 "cool.flex"
{ }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 148 "cool.flex"
{curr_lineno++;}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 149 "cool.flex"
{cool_yylval.error_msg = yytext; return ERROR;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 152 "cool.flex"
ECHO;
	YY_BREAK
#line 2394 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 772 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 772 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 771);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 152 "cool.flex"



int add_string(char *s)
{
    size_t size = strlen(s);
    bool more = false;

    for(size_t i = 0;i<size;i++){
	if (string_buf_ptr - string_buf >= MAX_STR_CONST){
	    cool_yylval.error_msg = "String constant too long";
	    reset_state();
	    return ERROR;
	}
	if (s[i] == '\\'){
	    if (s[i+1] == 'b'){
		*string_buf_ptr = '\b';
	    } else if (s[i+1] == 'f'){
		*string_buf_ptr = '\f';
	    } else if (s[i+1] == 'n'){
		*string_buf_ptr = '\n';
            } else if (s[i+1] == '\n'){
		*string_buf_ptr = '\n';
		more = true;
	    }else if (s[i+1] == 't'){
		*string_buf_ptr = '\t';
            } else if (s[i+1] == 'v'){
		*string_buf_ptr = '\v';
	    } else if (s[i+1] == '\"'){
		*string_buf_ptr = '\"';
		more = true;
	    }else {
		*string_buf_ptr = s[i+1];
            }
	    string_buf_ptr++;
	    i++;
	    continue;
        }

	if (s[i] == '\"'){
	    cool_yylval.symbol = stringtable.add_string(string_buf);
	    reset_state();
	    return STR_CONST;
	} 

        if (s[i] == '\n'){
	    reset_state();
	    cool_yylval.error_msg = "Unterminated string constant";
	    return ERROR;
	} 
	*string_buf_ptr = s[i];
	string_buf_ptr++;
    }

    if (!more){
	cool_yylval.error_msg = "String contains null character";
	reset_state();
	return ERROR;
    } 

    return 0;

}


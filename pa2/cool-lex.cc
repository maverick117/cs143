#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 55
#define YY_END_OF_BUFFER 56
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[710] =
    {   0,
        0,    0,    2,    2,    0,    0,   56,   55,   52,   53,
       54,    8,   15,   16,   10,    9,   24,   11,   20,   13,
       28,   19,   14,   22,   23,   21,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   17,   54,
       18,   12,    2,    2,    2,    2,    2,    2,    2,    4,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,   55,   52,    7,

       54,    6,   15,   16,   10,    9,   24,   11,   20,   13,
       28,   19,   14,   22,   23,   21,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   17,   54,
       18,   12,   52,    5,   51,    0,   28,   45,   46,   47,
       27,   27,   27,    0,   27,   27,    0,   27,   31,   27,
       27,   27,   32,   27,   27,    0,   27,    0,   27,   42,
       27,    0,   27,    0,   27,    0,   50,   50,   50,   50,
       50,   31,   50,   32,   33,   50,   50,   50,   50,   50,
       42,   50,   50,   50,   50,    0,    0,   32,    0,    0,

       33,    0,    0,   31,    2,    2,    3,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    0,    7,    6,
       52,    5,   51,    0,   28,   45,   46,   47,   27,   27,
       27,    0,   27,   27,    0,   27,   31,   27,   27,   27,
       32,   27,   27,    0,   27,    0,   27,   42,   27,    0,

       27,    0,   27,    0,   50,   50,   50,   50,   50,   31,
       50,   32,   33,   50,   50,   50,   50,   50,   42,   50,
       50,   50,   50,    0,    0,   32,    0,    0,   33,    0,
        0,   31,    0,   48,   27,    0,   27,    0,    0,   27,
        0,   27,    0,    0,   27,    0,   27,    0,    0,   27,
       35,   27,    0,   35,   27,   43,   27,    0,   27,    0,
       27,    0,   50,   50,   50,   50,   50,   50,   50,   35,
       50,   43,   49,   50,   50,   50,   50,   35,    0,    0,
        0,    0,    0,    0,   35,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    7,
        6,   27,    0,   27,    0,    0,   27,    0,   27,    0,
        0,   27,    0,   27,    0,    0,   27,   35,   27,    0,
       35,   27,   43,   27,    0,   27,    0,   27,    0,   50,
       50,   50,   50,   50,   50,   50,   35,   50,   43,   49,
       50,   50,   50,   50,   35,    0,    0,    0,    0,    0,
        0,   35,   27,   40,   27,    0,   40,   27,   30,   27,

       41,   30,   27,    0,   27,    0,    0,   27,   36,   27,
       37,   27,   38,   27,    0,   40,   50,   30,   41,   50,
       50,   50,   36,   37,   38,   25,   50,   38,   30,   36,
       41,   41,   30,   30,   37,   30,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       27,   40,   27,    0,   40,   27,   30,   27,   41,   30,
       27,    0,   27,    0,    0,   27,   36,   27,   37,   27,

       38,   27,    0,   40,   50,   30,   41,   50,   50,   50,
       36,   37,   38,   25,   50,   38,   30,   36,   41,   41,
       30,   30,   37,   30,   27,   29,   27,    0,   27,    0,
        0,   27,   39,   29,   26,   50,   50,   39,   29,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   27,   29,   27,    0,   27,    0,
        0,   27,   39,   29,   26,   50,   50,   39,   29,   27,
        0,   27,   44,   44,   50,   44,    2,    2,    2,    2,
        2,    2,    2,   27,    0,   27,   44,   44,   50,   44,
       27,    0,   50,    2,    2,    2,   27,    0,   50,   27,

       34,   34,    2,    2,    2,   27,   34,   34,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,   25,   26,   27,   28,   29,   30,   31,
       27,   32,   33,   27,   27,   34,   27,   35,   36,   37,
       27,   38,   39,   40,   27,   41,   42,   27,   27,   27,
       43,    1,   44,   45,   46,    1,   47,   48,   49,   50,

       51,   52,   48,   53,   54,   48,   48,   55,   48,   56,
       57,   58,   48,   59,   60,   61,   62,   63,   64,   48,
       48,   48,   65,   66,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        1,    1,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[717] =
    {   0,
        0,    0,   68,    0,  136,    0,  974, 2514,  969, 2514,
     2514, 2514,  954, 2514,  917, 2514, 2514,  891, 2514, 2514,
      872, 2514, 2514,  189,  866, 2514,    0,  180,  174,  176,
      185,  181,  177,  184,  182,  178,  201,    0,  223,  219,
      222,  221,  229,  233,  230,  226,  259,  240, 2514,  300,
     2514, 2514,    0,  883,    0,    0,    0,  818,    0,  741,
        0,    0,  734,    0,    0,  719,    0,    0,  203,  707,
        0,  366,  274,  283,  261,  404,  406,  293,  276,  280,
      292,  405,  472,  515,  508,  510,  513,  520,  521,  514,
      284,  529,  543,    0,  584,    0,    0,  218,  299, 2514,

      261, 2514,  300,  306,  435,  358,  359,  443,  446,  447,
      450,  462,  463,  588,  589,  550,  650,  693,  566,  568,
      689,  576,  577,  690,  686,  691,  694,  760,  803,  796,
      692,  801,  808,  809,  802,  798,  817,  820,  555,  884,
      580,  594,  644, 2514, 2514,  642,  583, 2514, 2514, 2514,
        0,  564,  582,  845,  833,  816,  862,    0, 2514,    0,
      847,  688,  880,  837,  868,  890,  583,  900,    0, 2514,
      888,  891,  902,  919,  922,  925,    0,  842,  926,  920,
      934,    0,  543,    0,  929,  921,  932,  933,  941,  529,
        0,  953,  945,  527,  961,  958,  962, 2514,  979,  975,

      976,  977,  990, 1031,    0,  557, 2514, 2514,  441,  535,
        0,    0,    0,    0,  978,  999, 1021, 1009, 1032, 1054,
        0,    0,    0, 1023, 1011, 1058, 1043, 1050, 1066, 1070,
     1071,    0,    0, 1060, 1072, 1080, 1088, 1086, 1089,    0,
     1091, 1102, 1103, 1115,    0,  430,    0, 1112, 1084, 1105,
     1117, 1106,  401,    0, 1120, 1128,  399, 1126, 1122, 1145,
        0, 1163, 1150, 1152, 1155, 1172, 1213,  727, 2514, 2514,
      731,  732,  838,  842,  875,  843,  892,  960,    0, 1160,
     1175, 1197, 1164, 1181, 1222,    0, 1046,    0, 1205, 1193,
     1275, 1225, 1215, 1282, 1226, 1290,    0, 1100, 1239, 1294,

     1232, 1299, 1261, 1298,    0, 1274, 1295, 1287, 1297,    0,
      390,    0, 1280, 1243, 1296, 1253, 1303,  380,    0, 1313,
     1307,  317, 1322, 1363, 1369, 1170, 1377, 1378, 1381, 1382,
     1395, 1459,  362, 2514, 1348, 1361, 1356, 1366, 1415, 1389,
     1390,  518, 1418, 1421, 1420, 1422, 1335, 1358, 1460,    0,
     2514, 1416, 1439, 1466,    0, 2514, 1449, 1473, 1340, 1474,
     1480, 1487, 1427, 1488, 1478, 1503,  288, 1504, 1500,    0,
     1501,    0,    0, 1507, 1502,  268, 1509, 2514, 1516, 1526,
     1542, 1552, 1546, 1530, 1591,  893,    0, 1533, 1563, 1544,
     1551, 1592, 1572, 1573, 1566, 1588, 1625, 1590, 1614, 1609,

     1624, 1631,    0,    0, 1613, 1626, 1627,    0,    0, 1628,
     1634, 1642, 1643, 1652, 1661, 1666, 1662, 1672, 1675,  254,
     1674, 1669,    0, 1673,    0,    0, 1678, 1680,  259, 1679,
        0, 1695, 1713, 1719, 1721, 1709, 1717, 1760, 1228, 2514,
      295, 1725, 1762, 1720, 1795, 1799, 1742, 1800, 1735, 1807,
     1818, 1776, 1819, 1796, 1836, 1871,    0, 1237, 1723, 1840,
     1855,    0, 1460, 1797, 1875, 1798, 1876, 1802, 1883, 1852,
     1844, 1857, 1863,  237, 1865, 1839,    0, 1877,    0,    0,
     1860, 1884,  224, 1890, 1474, 1931, 1922, 1941, 1955, 1964,
     1950, 2028,    0, 2514, 1908, 1924, 1940,    0, 2514,    0,

     2514, 2514, 1781, 1939, 1688, 1948, 1956,    0, 2514,    0,
     2514,    0, 2514, 1942, 1981,    0, 1978,    0,    0,  220,
     1980, 1986,    0,    0,    0,    0, 2004, 2006, 1988, 2514,
     1987, 2021, 2514, 2007, 2029, 2059,    0,    0, 2030, 2039,
     2043,    0,    0,    0,    0,    0, 2055, 2063, 1995, 2058,
     2069,    0,    0,    0,    0,    0,    0, 2076, 2081,    0,
     2077,    0,    0,  217, 2079, 2082,    0,    0,    0,    0,
     2090, 2100, 2092,    0, 2101, 2094,    0, 2102, 2114, 2139,
        0, 1542, 2110, 2168, 2176,    0, 1584,    0, 1602, 1630,
     2125, 2154, 2120, 2184, 2192,    0, 1631,    0, 1667,    0,

     1894, 2134, 2201,    0, 2136,    0,    0,  174, 2144, 2155,
        0,    0,    0,    0, 2171, 2209, 2224, 1954, 2238, 2242,
     1959, 2221, 2252, 2316,    0, 2514, 2178, 2200, 1904, 2190,
     2220,    0, 2514,    0,    0, 2229, 2219,    0, 2239,    0,
        0, 2240, 2243, 2248, 2249, 2278,    0,    0,    0,    0,
     2246, 2267,    0, 2287,    0, 2020, 2268, 2324, 2281, 2321,
     2335,    0, 2032,    0,    0, 2297, 2306,    0, 2355, 2010,
     2308,    0, 2514, 2325, 2333,    0, 2337, 2341,    0,    0,
     2352, 2353,    0, 2356, 2392,    0, 2213, 2401, 2368,    0,
     2371, 2373, 2376, 2384, 2385, 2386, 2388, 2425, 2399,    0,

     2514,    0,    0,    0,    0,    0, 2320,    0, 2514,  218,
     2489, 2493, 2497, 2501, 2505, 2509
    } ;

static yyconst flex_int16_t yy_def[717] =
    {   0,
      709,    1,  709,    3,  709,    5,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  709,  709,
      709,  709,  712,  712,  712,  712,  712,  712,  712,  709,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  709,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,  709,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,  712,  712,  712,  712,  713,  713,  709,

      713,  709,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  709,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  709,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  713,  713,
      713,  713,  709,  709,  709,  714,  709,  709,  709,  709,
      710,  710,  710,  709,  710,  710,  709,  710,  709,  710,
      710,  710,  709,  710,  710,  709,  710,  709,  710,  709,
      710,  709,  710,  709,  710,  709,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  709,  709,  709,  709,  709,

      709,  709,  709,  709,  712,  712,  709,  709,  715,  712,
      712,  712,  712,   72,   72,   72,  712,   72,   72,  712,
       72,  712,   72,   72,   72,  712,   72,   72,  712,   72,
      712,   72,  712,   72,  712,   72,  712,   72,  712,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  713,  709,  709,
      713,  713,  713,  716,  713,  713,  713,  713,  117,  117,
      117,  713,  117,  117,  713,  117,  713,  117,  117,  117,
      713,  117,  117,  713,  117,  713,  117,  713,  117,  713,

      117,  713,  117,  713,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  714,  709,  710,  709,  710,  709,  709,  710,
      709,  710,  709,  709,  710,  709,  710,  709,  709,  710,
      709,  710,  709,  709,  710,  709,  710,  709,  710,  709,
      710,  709,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  709,  709,  709,
      709,  709,  709,  709,  709,  715,  712,   72,  712,   72,
      712,  712,   72,  712,   72,  712,  712,   72,  712,   72,

      712,  712,   72,  712,   72,  712,  712,   72,  712,   72,
      712,   72,  712,   72,  712,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
      712,  712,  712,  712,  712,  712,  712,  712,  716,  709,
      714,  117,  713,  117,  713,  713,  117,  713,  117,  713,
      713,  117,  713,  117,  713,  713,  117,  713,  117,  713,
      713,  117,  713,  117,  713,  117,  713,  117,  713,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  713,  713,  713,  713,  713,  713,
      713,  713,  710,  709,  710,  709,  709,  710,  709,  710,

      709,  709,  710,  709,  710,  709,  709,  710,  709,  710,
      709,  710,  709,  710,  709,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  709,  709,  709,
      709,  709,  709,  709,  709,  709,   72,  712,   72,  712,
      712,   72,  712,   72,  712,  712,   72,  712,   72,  712,
      712,   72,  712,   72,  712,   72,  712,   72,  712,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      117,  713,  117,  713,  713,  117,  713,  117,  713,  713,
      117,  713,  117,  713,  713,  117,  713,  117,  713,  117,

      713,  117,  713,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  710,  709,  710,  709,  710,  709,
      709,  710,  709,  711,  711,  711,  711,  711,  709,   72,
      712,   72,  712,   72,  712,  712,   72,  712,   83,   83,
       83,   83,   83,  712,  117,  713,  117,  713,  117,  713,
      713,  117,  713,  128,  128,  128,  128,  128,  713,  710,
      709,  710,  709,  709,  711,  711,   72,  712,   72,  712,
      712,   83,   83,  117,  713,  117,  713,  713,  128,  128,
      710,  709,  711,   72,  712,   83,  117,  713,  128,  710,

      709,  711,   72,  712,   83,  117,  713,  128,    0,  709,
      709,  709,  709,  709,  709,  709
    } ;

static yyconst flex_uint16_t yy_nxt[2583] =
    {   0,
        8,    9,   10,   11,   12,   11,   11,   11,   11,   11,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   11,   26,   27,   27,   28,   27,   29,
       30,   27,   31,   32,   33,   34,   35,   27,   27,   36,
       27,   37,   11,   11,   11,    8,   38,   38,   39,   38,
       40,   41,   38,   42,   43,   44,   45,   46,   38,   38,
       47,   38,   38,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   56,   56,   56,   56,   56,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   56,   71,   72,   72,   73,   72,   74,   75,   72,

       76,   77,   78,   79,   80,   72,   72,   81,   72,   82,
       56,   56,   56,   53,   83,   83,   84,   83,   85,   86,
       83,   87,   88,   89,   90,   91,   83,   83,   92,   83,
       83,   93,   94,   95,   96,   97,   98,   99,  100,  101,
      102,  101,  101,  101,  101,  101,  103,  104,  105,  106,
      107,  108,  109,  110,  111,  112,  113,  114,  115,  101,
      116,  117,  117,  118,  117,  119,  120,  117,  121,  122,
      123,  124,  125,  117,  117,  126,  117,  127,  101,  101,
      101,   98,  128,  128,  129,  128,  130,  131,  128,  132,
      133,  134,  135,  136,  128,  128,  137,  128,  128,  138,

      139,  140,  141,  142,  148,  152,  167,  155,  158,  173,
      164,  149,  156,  153,  169,  160,  165,  171,  211,  161,
      269,  151,  270,  162,  665,  212,  152,  167,  155,  158,
      173,  164,  175,  156,  153,  169,  160,  165,  171,  157,
      161,  159,  168,  174,  162,  154,  166,  172,  178,  170,
      163,  184,  180,  175,  182,  185,  179,  181,  187,  186,
      191,  192,  189,  269,  188,  270,  176,  650,  183,  178,
      635,  195,  184,  180,  614,  182,  185,  179,  181,  187,
      186,  191,  192,  189,  157,  188,  163,  159,  154,  190,
      193,  172,  195,  221,  166,  170,  608,  334,  168,  215,

      271,  269,  269,  270,  270,  176,  232,  216,  269,  570,
      270,  193,  272,  564,  221,  234,  218,  194,  526,  255,
      215,  219,  230,  236,  174,  196,  222,  232,  216,  197,
      198,  199,  159,  200,  201,  202,  234,  218,  203,  217,
      255,  233,  219,  230,  236,  235,  196,  520,  220,  235,
      197,  198,  199,  159,  200,  201,  202,  237,  231,  203,
      269,  269,  270,  270,  334,  204,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  483,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  214,  214,  214,  214,  214,  214,  214,  214,  214,

      214,  214,  214,  214,  214,  214,  214,  214,  205,  205,
      205,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      205,  205,  205,  205,  223,  227,  238,  269,  224,  270,
      480,  228,  225,  387,  474,  269,  273,  270,  269,  269,
      270,  270,  269,  333,  270,  223,  227,  238,  274,  224,
      429,  426,  228,  225,  269,  269,  270,  270,  275,  226,
      239,  229,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  420,  205,  205,  205,  205,  205,
      240,  205,  205,  205,  205,  205,  205,  240,  240,  240,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  205,  205,  205,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  205,  205,  205,  205,
      241,  243,  245,  247,  254,  500,  244,  248,  242,  250,
      252,  249,  269,  210,  270,  251,  246,  269,  206,  270,
      256,  241,  243,  245,  247,  254,  500,  244,  248,  242,
      250,  252,  249,  220,  258,  222,  251,  253,  226,  233,
      217,  256,  269,  501,  270,  229,  231,  257,  376,  373,
      269,  269,  270,  270,  237,  258,  269,  367,  270,  283,

      286,  147,  335,  276,  284,  292,  295,  337,  239,  259,
      277,  293,  278,  260,  261,  262,  222,  263,  264,  265,
      283,  286,  266,  335,  355,  284,  292,  295,  337,  336,
      259,  285,  293,  287,  260,  261,  262,  222,  263,  264,
      265,  294,  296,  266,  334,  143,  355,  338,  356,  267,
      268,  268,  269,  268,  270,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  268,  268,  268,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  268,  268,  268,  268,  280,  288,
      297,  299,  301,  289,  310,  303,  281,  290,  347,  269,
      213,  270,  271,  269,  269,  270,  270,  210,  311,  280,
      288,  297,  299,  301,  289,  310,  303,  281,  290,  209,
      347,  300,  208,  348,  291,  298,  302,  287,  282,  304,
      268,  268,  269,  268,  270,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  305,  268,
      268,  268,  268,  268,  268,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,

      305,  305,  268,  268,  268,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  268,  268,  268,  268,  306,  308,
      207,  312,  319,  320,  309,  313,  307,  315,  317,  314,
      269,  342,  270,  316,  440,  269,  441,  270,  321,  306,
      308,  323,  312,  319,  320,  309,  313,  307,  315,  317,
      314,  285,  342,  300,  316,  318,  291,  298,  282,  321,
      338,  340,  323,  294,  296,  322,  350,  269,  345,  270,
      363,  343,  302,  336,  206,  304,  269,  343,  270,  150,
      147,  338,  340,  275,  269,  387,  270,  350,  341,  345,

      341,  363,  351,  352,  336,  333,  146,  336,  343,  324,
      339,  346,  346,  325,  326,  327,  287,  328,  329,  330,
      348,  341,  331,  357,  352,  353,  358,  344,  145,  351,
      324,  359,  346,  353,  325,  326,  327,  287,  328,  329,
      330,  356,  348,  331,  357,  349,  353,  358,  360,  332,
      351,  364,  359,  358,  361,  354,  358,  362,  365,  366,
      368,  369,  269,  356,  270,  356,  144,  360,  371,  360,
      143,  370,  364,  709,  375,  361,  709,  709,  362,  365,
      366,  368,  372,  369,  360,  341,  348,  362,  374,  371,
      362,  338,  370,  377,  346,  375,  336,  351,  353,  343,

      338,  351,  709,  356,  372,  709,  356,  346,  360,  374,
      360,  362,  381,  341,  377,  343,  388,  336,  358,  709,
      709,  338,  351,  336,  390,  356,  362,  378,  346,  360,
      348,  709,  362,  381,  341,  709,  343,  388,  709,  709,
      380,  346,  381,  389,  379,  390,  391,  393,  269,  709,
      270,  400,  348,  709,  398,  382,  383,  395,  709,  389,
      360,  709,  346,  362,  391,  709,  381,  391,  393,  384,
      351,  348,  356,  400,  394,  398,  401,  383,  395,  396,
      389,  360,  403,  346,  362,  405,  392,  381,  399,  399,
      384,  351,  394,  348,  356,  410,  385,  396,  401,  709,

      396,  406,  269,  403,  270,  404,  405,  411,  404,  412,
      399,  408,  409,  394,  709,  406,  410,  413,  414,  397,
      401,  415,  406,  402,  422,  411,  404,  417,  411,  416,
      412,  407,  709,  408,  409,  409,  409,  411,  413,  414,
      419,  418,  415,  421,  423,  413,  422,  425,  417,  401,
      416,  415,  424,  413,  415,  427,  389,  428,  430,  709,
      389,  419,  418,  709,  421,  423,  709,  391,  394,  425,
      404,  409,  269,  424,  270,  391,  427,  399,  428,  430,
      396,  389,  406,  399,  404,  411,  409,  389,  394,  709,
      434,  415,  413,  413,  709,  415,  391,  396,  442,  269,

      444,  270,  447,  709,  399,  404,  449,  709,  409,  394,
      431,  434,  401,  413,  709,  433,  415,  399,  396,  442,
      434,  444,  445,  447,  269,  443,  270,  449,  432,  448,
      440,  709,  441,  454,  401,  443,  452,  435,  436,  269,
      445,  270,  413,  445,  399,  415,  450,  450,  434,  709,
      459,  437,  404,  401,  409,  454,  443,  452,  455,  436,
      448,  466,  446,  413,  457,  399,  415,  462,  450,  434,
      453,  459,  437,  404,  464,  401,  409,  269,  438,  270,
      460,  448,  466,  476,  269,  457,  270,  451,  478,  462,
      458,  463,  269,  468,  270,  464,  269,  467,  270,  709,

      269,  269,  270,  270,  465,  476,  453,  709,  455,  478,
      709,  475,  470,  709,  468,  455,  709,  460,  460,  709,
      471,  458,  473,  709,  709,  472,  469,  453,  467,  465,
      469,  463,  475,  470,  709,  477,  482,  455,  460,  443,
      456,  471,  458,  473,  479,  453,  472,  461,  481,  467,
      465,  469,  448,  463,  484,  463,  477,  482,  709,  465,
      445,  458,  450,  469,  467,  269,  479,  270,  463,  481,
      505,  269,  467,  270,  512,  484,  709,  493,  465,  269,
      269,  270,  270,  269,  269,  270,  270,  469,  709,  709,
      494,  505,  709,  506,  495,  512,  709,  269,  493,  270,

      506,  443,  709,  445,  496,  513,  467,  709,  458,  469,
      463,  494,  453,  494,  506,  495,  448,  488,  498,  499,
      450,  496,  443,  506,  445,  496,  494,  467,  443,  458,
      469,  496,  463,  453,  485,  455,  709,  448,  488,  498,
      499,  450,  486,  487,  494,  501,  453,  488,  501,  503,
      499,  504,  508,  496,  499,  499,  516,  455,  709,  709,
      489,  269,  269,  270,  270,  494,  501,  709,  709,  501,
      503,  499,  504,  508,  496,  509,  269,  516,  270,  709,
      497,  509,  510,  501,  490,  504,  502,  504,  467,  504,
      453,  469,  494,  709,  488,  506,  509,  491,  458,  455,

      463,  709,  509,  510,  509,  490,  511,  518,  513,  467,
      504,  453,  469,  514,  511,  488,  506,  709,  491,  458,
      515,  455,  463,  509,  492,  507,  517,  511,  518,  513,
      519,  509,  709,  521,  514,  522,  525,  523,  511,  513,
      524,  515,  527,  499,  269,  515,  270,  517,  709,  515,
      513,  519,  515,  496,  521,  499,  522,  525,  523,  533,
      709,  524,  537,  527,  496,  506,  509,  513,  501,  504,
      515,  513,  511,  501,  515,  511,  499,  709,  509,  501,
      533,  528,  539,  537,  496,  496,  269,  506,  270,  540,
      709,  529,  538,  544,  501,  533,  511,  709,  538,  509,

      501,  542,  543,  539,  269,  496,  270,  530,  506,  540,
      540,  532,  709,  538,  544,  545,  540,  531,  501,  547,
      534,  538,  542,  543,  535,  513,  506,  509,  538,  496,
      540,  545,  269,  269,  270,  270,  545,  543,  543,  501,
      547,  534,  538,  548,  549,  535,  513,  506,  509,  552,
      496,  540,  545,  545,  543,  548,  536,  541,  709,  550,
      548,  554,  553,  553,  548,  549,  550,  555,  709,  269,
      552,  270,  709,  545,  550,  543,  556,  557,  553,  548,
      550,  548,  554,  553,  553,  558,  709,  550,  555,  550,
      546,  553,  553,  555,  559,  560,  551,  556,  557,  555,

      561,  562,  563,  565,  566,  709,  558,  557,  557,  567,
      709,  568,  571,  709,  569,  559,  560,  559,  709,  709,
      629,  561,  562,  563,  565,  566,  559,  540,  559,  557,
      567,  538,  568,  571,  550,  569,  545,  543,  553,  548,
      545,  629,  543,  555,  559,  557,  577,  540,  545,  559,
      557,  540,  555,  630,  581,  553,  550,  545,  583,  596,
      572,  709,  588,  543,  269,  709,  270,  577,  540,  545,
      709,  586,  540,  555,  576,  581,  553,  550,  573,  583,
      596,  709,  577,  588,  574,  584,  575,  545,  597,  578,
      582,  582,  586,  579,  557,  550,  553,  269,  540,  270,

      589,  269,  269,  270,  270,  591,  709,  587,  545,  269,
      578,  270,  582,  709,  579,  557,  550,  553,  627,  540,
      269,  269,  270,  270,  709,  580,  591,  582,  582,  587,
      598,  593,  600,  584,  589,  602,  709,  584,  269,  627,
      270,  592,  269,  709,  270,  589,  628,  587,  592,  582,
      587,  598,  593,  600,  584,  589,  602,  269,  584,  270,
      584,  594,  599,  601,  585,  587,  589,  603,  587,  592,
      709,  594,  589,  269,  610,  270,  597,  269,  269,  270,
      270,  604,  605,  590,  592,  269,  606,  270,  709,  709,
      607,  597,  594,  612,  609,  610,  269,  597,  270,  709,

      592,  594,  604,  605,  594,  597,  594,  606,  599,  584,
      601,  607,  597,  611,  612,  609,  603,  582,  613,  709,
      597,  592,  587,  615,  269,  599,  270,  594,  589,  599,
      592,  601,  672,  269,  611,  270,  595,  603,  709,  613,
      599,  601,  597,  269,  615,  270,  625,  709,  603,  601,
      709,  587,  269,  672,  270,  603,  269,  269,  270,  270,
      584,  269,  626,  270,  603,  601,  269,  625,  270,  673,
      709,  632,  587,  626,  599,  709,  628,  597,  626,  621,
      630,  584,  589,  626,  709,  603,  601,  617,  630,  626,
      594,  589,  632,  628,  709,  599,  616,  628,  597,  626,

      621,  630,  584,  589,  628,  626,  618,  633,  709,  630,
      633,  594,  589,  630,  628,  621,  634,  636,  637,  630,
      619,  631,  269,  584,  270,  709,  626,  644,  709,  620,
      269,  633,  270,  638,  269,  633,  270,  634,  636,  637,
      630,  709,  709,  626,  628,  628,  633,  626,  644,  691,
      709,  630,  630,  626,  638,  589,  633,  622,  633,  626,
      645,  623,  601,  594,  597,  628,  584,  709,  640,  633,
      691,  633,  628,  709,  709,  692,  589,  641,  622,  633,
      626,  641,  623,  601,  594,  597,  626,  584,  633,  640,
      645,  630,  642,  624,  633,  641,  628,  626,  641,  709,

      643,  645,  641,  709,  641,  647,  643,  709,  641,  633,
      648,  645,  630,  642,  652,  649,  651,  628,  626,  653,
      643,  643,  645,  645,  639,  709,  647,  643,  643,  648,
      641,  648,  641,  645,  646,  652,  649,  651,  709,  643,
      653,  648,  641,  648,  643,  709,  648,  645,  655,  709,
      648,  641,  659,  641,  645,  648,  269,  641,  270,  641,
      643,  709,  657,  662,  648,  648,  645,  643,  648,  655,
      269,  645,  270,  659,  664,  656,  643,  641,  269,  648,
      270,  666,  709,  657,  662,  660,  269,  667,  270,  648,
      658,  658,  645,  709,  269,  664,  270,  643,  641,  663,

      668,  656,  666,  269,  654,  270,  656,  709,  667,  658,
      670,  269,  658,  270,  656,  269,  660,  270,  673,  658,
      660,  668,  709,  269,  660,  270,  269,  656,  270,  658,
      663,  670,  671,  656,  709,  656,  663,  660,  663,  673,
      269,  656,  270,  671,  269,  660,  270,  676,  673,  660,
      658,  663,  671,  671,  269,  673,  270,  661,  658,  663,
      709,  675,  656,  709,  709,  671,  663,  673,  676,  673,
      660,  671,  677,  671,  663,  678,  679,  680,  682,  658,
      656,  663,  675,  656,  673,  674,  658,  709,  673,  656,
      709,  660,  671,  677,  671,  683,  678,  679,  680,  682,

      684,  656,  663,  660,  674,  678,  680,  656,  678,  686,
      678,  678,  709,  680,  680,  680,  683,  663,  269,  678,
      270,  684,  269,  269,  270,  270,  269,  680,  270,  689,
      686,  678,  680,  685,  690,  709,  680,  269,  709,  270,
      678,  709,  709,  681,  709,  663,  687,  692,  660,  687,
      689,  709,  681,  658,  656,  690,  685,  269,  709,  270,
      709,  709,  685,  687,  692,  709,  663,  685,  692,  660,
      687,  687,  693,  692,  658,  656,  694,  685,  709,  709,
      695,  669,  709,  687,  687,  692,  687,  685,  685,  685,
      692,  695,  696,  693,  269,  697,  270,  694,  692,  709,

      688,  695,  695,  269,  687,  270,  695,  699,  685,  700,
      709,  701,  695,  696,  702,  709,  697,  695,  695,  709,
      688,  698,  703,  704,  705,  709,  706,  269,  699,  270,
      700,  698,  701,  698,  709,  702,  701,  708,  701,  709,
      698,  701,  709,  703,  704,  705,  709,  706,  709,  704,
      704,  704,  698,  707,  709,  709,  709,  698,  708,  709,
      709,  698,  709,  707,  707,  709,  698,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  707,  709,  709,  709,  709,  709,
      707,  177,  177,  205,  709,  205,  205,  268,  268,  268,

      268,  333,  333,  333,  333,  386,  386,  386,  386,  439,
      439,  439,  439,    7,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709
    } ;

static yyconst flex_int16_t yy_chk[2583] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,   24,   28,   33,   29,   30,   36,
       32,   24,   29,   28,   34,   31,   32,   35,   69,   31,
       98,  710,   98,   31,  608,   69,   28,   33,   29,   30,
       36,   32,   37,   29,   28,   34,   31,   32,   35,   29,
       31,   30,   33,   36,   31,   28,   32,   35,   39,   34,
       31,   42,   40,   37,   41,   42,   39,   40,   43,   42,
       45,   46,   44,  101,   43,  101,   37,  564,   41,   39,
      520,   48,   42,   40,  483,   41,   42,   39,   40,   43,
       42,   45,   46,   44,   40,   43,   42,   41,   39,   44,
       47,   46,   48,   75,   43,   45,  474,  441,   44,   73,

       99,   99,  103,   99,  103,   48,   79,   73,  104,  429,
      104,   47,  103,  420,   75,   80,   74,   47,  376,   91,
       73,   74,   78,   81,   47,   50,   75,   79,   73,   50,
       50,   50,   50,   50,   50,   50,   80,   74,   50,   73,
       91,   79,   74,   78,   81,   80,   50,  367,   74,   91,
       50,   50,   50,   50,   50,   50,   50,   81,   78,   50,
      106,  107,  106,  107,  333,   50,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,  322,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   76,   77,   82,  105,   76,  105,
      318,   77,   76,  209,  311,  108,  105,  108,  109,  110,
      109,  110,  111,  209,  111,   76,   77,   82,  108,   76,
      257,  253,   77,   76,  112,  113,  112,  113,  111,   76,
       82,   77,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  246,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       84,   85,   86,   87,   90,  342,   85,   87,   84,   88,
       89,   87,  116,  210,  116,   88,   86,  139,  206,  139,
       92,   84,   85,   86,   87,   90,  342,   85,   87,   84,
       88,   89,   87,   85,   93,   86,   88,   89,   87,   90,
       84,   92,  141,  342,  141,   88,   89,   92,  194,  190,
      114,  115,  114,  115,   92,   93,  142,  183,  142,  119,

      120,  147,  152,  114,  119,  122,  123,  153,   93,   95,
      114,  122,  115,   95,   95,   95,   95,   95,   95,   95,
      119,  120,   95,  152,  167,  119,  122,  123,  153,  152,
       95,  119,  122,  120,   95,   95,   95,   95,   95,   95,
       95,  122,  123,   95,  146,  143,  167,  153,  167,   95,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  118,  121,
      124,  125,  126,  121,  131,  127,  118,  121,  162,  268,
       70,  268,  271,  271,  272,  271,  272,   66,  131,  118,
      121,  124,  125,  126,  121,  131,  127,  118,  121,   63,
      162,  125,   60,  162,  121,  124,  126,  131,  118,  127,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  129,  130,
       58,  132,  135,  136,  130,  132,  129,  133,  134,  132,
      273,  156,  273,  133,  274,  276,  274,  276,  137,  129,
      130,  138,  132,  135,  136,  130,  132,  129,  133,  134,
      132,  130,  156,  136,  133,  134,  132,  135,  129,  137,
      154,  155,  138,  133,  134,  137,  164,  275,  161,  275,
      178,  156,  137,  154,   54,  138,  140,  157,  140,   25,
       21,  154,  155,  275,  277,  386,  277,  164,  155,  161,

      157,  178,  164,  165,  154,  386,   18,  178,  157,  140,
      154,  163,  161,  140,  140,  140,  140,  140,  140,  140,
      163,  157,  140,  171,  165,  166,  172,  157,   15,  166,
      140,  173,  163,  165,  140,  140,  140,  140,  140,  140,
      140,  168,  163,  140,  171,  163,  166,  172,  174,  140,
      166,  179,  173,  171,  175,  166,  172,  176,  180,  181,
      185,  186,  278,  168,  278,  168,   13,  173,  188,  174,
        9,  187,  179,    7,  193,  175,    0,    0,  176,  180,
      181,  185,  189,  186,  174,  180,  186,  175,  192,  188,
      176,  179,  187,  195,  185,  193,  196,  187,  188,  181,

      200,  197,    0,  197,  189,    0,  189,  201,  199,  192,
      193,  199,  202,  200,  195,  203,  215,  196,  192,    0,
        0,  200,  197,  196,  216,  197,  195,  197,  201,  199,
      203,    0,  199,  202,  200,    0,  203,  215,    0,    0,
      200,  201,  202,  215,  199,  216,  217,  218,  287,    0,
      287,  225,  203,    0,  224,  203,  204,  219,    0,  217,
      204,    0,  204,  204,  216,    0,  204,  217,  218,  204,
      204,  204,  204,  225,  218,  224,  225,  204,  219,  220,
      217,  204,  227,  204,  204,  228,  217,  204,  224,  226,
      204,  204,  220,  204,  204,  234,  204,  219,  226,    0,

      220,  229,  298,  227,  298,  229,  228,  235,  227,  236,
      226,  230,  231,  220,    0,  228,  234,  237,  238,  220,
      226,  239,  229,  226,  249,  234,  229,  242,  235,  241,
      236,  229,    0,  230,  231,  230,  231,  235,  237,  238,
      244,  243,  239,  248,  250,  236,  249,  252,  242,  249,
      241,  238,  251,  237,  239,  255,  241,  256,  258,    0,
      259,  244,  243,    0,  248,  250,    0,  242,  243,  252,
      250,  252,  326,  251,  326,  263,  255,  248,  256,  258,
      244,  259,  251,  264,  260,  255,  260,  259,  263,    0,
      265,  258,  262,  256,    0,  262,  263,  266,  280,  282,

      281,  282,  283,    0,  264,  260,  284,    0,  260,  263,
      260,  265,  266,  262,    0,  263,  262,  264,  266,  280,
      265,  281,  282,  283,  285,  280,  285,  284,  262,  283,
      439,    0,  439,  290,  266,  282,  289,  266,  267,  458,
      281,  458,  267,  282,  267,  267,  284,  285,  267,    0,
      293,  267,  267,  267,  267,  290,  282,  289,  290,  267,
      285,  301,  282,  267,  292,  267,  267,  295,  285,  267,
      289,  293,  267,  267,  299,  267,  267,  291,  267,  291,
      293,  285,  301,  314,  294,  292,  294,  285,  316,  295,
      292,  295,  296,  303,  296,  299,  300,  301,  300,    0,

      304,  302,  304,  302,  299,  314,  291,    0,  314,  316,
        0,  313,  306,    0,  303,  291,    0,  294,  316,    0,
      307,  294,  309,    0,    0,  308,  303,  291,  302,  300,
      304,  296,  313,  306,    0,  315,  321,  291,  294,  306,
      291,  307,  294,  309,  317,  313,  308,  294,  320,  302,
      300,  304,  308,  296,  323,  296,  315,  321,    0,  300,
      307,  315,  309,  304,  302,  324,  317,  324,  317,  320,
      347,  325,  321,  325,  359,  323,    0,  335,  320,  327,
      328,  327,  328,  329,  330,  329,  330,  323,    0,    0,
      336,  347,    0,  348,  337,  359,    0,  331,  335,  331,

      347,  324,    0,  328,  338,  359,  327,    0,  325,  327,
      325,  336,  329,  335,  348,  337,  328,  330,  340,  341,
      331,  337,  324,  348,  328,  338,  336,  327,  324,  325,
      327,  338,  325,  329,  325,  331,    0,  328,  330,  340,
      341,  331,  327,  328,  339,  343,  329,  330,  344,  345,
      344,  346,  352,  339,  340,  341,  363,  331,    0,    0,
      331,  332,  463,  332,  463,  339,  343,    0,    0,  344,
      345,  344,  346,  352,  339,  353,  485,  363,  485,    0,
      339,  352,  357,  343,  332,  345,  344,  346,  332,  349,
      332,  332,  363,    0,  332,  349,  353,  332,  332,  332,

      332,    0,  354,  357,  353,  332,  358,  365,  360,  332,
      349,  332,  332,  361,  357,  332,  349,    0,  332,  332,
      362,  332,  332,  354,  332,  349,  364,  358,  365,  360,
      366,  354,    0,  368,  361,  369,  375,  371,  358,  360,
      374,  362,  377,  365,  582,  361,  582,  364,    0,  379,
      379,  366,  362,  364,  368,  380,  369,  375,  371,  384,
        0,  374,  388,  377,  380,  369,  371,  375,  366,  368,
      379,  379,  374,  383,  377,  381,  380,    0,  381,  382,
      384,  379,  390,  388,  383,  380,  587,  382,  587,  391,
        0,  380,  389,  395,  383,  384,  381,    0,  388,  381,

      382,  393,  394,  390,  589,  383,  589,  381,  382,  390,
      391,  383,    0,  389,  395,  396,  391,  382,  385,  398,
      385,  392,  393,  394,  385,  385,  385,  385,  389,  385,
      392,  395,  590,  597,  590,  597,  396,  393,  394,  385,
      398,  385,  392,  399,  400,  385,  385,  385,  385,  405,
      385,  392,  397,  396,  397,  398,  385,  392,    0,  401,
      402,  410,  406,  407,  399,  400,  402,  411,    0,  599,
      405,  599,    0,  397,  400,  397,  412,  413,  405,  399,
      401,  402,  410,  406,  407,  414,    0,  402,  411,  401,
      397,  406,  407,  410,  415,  416,  402,  412,  413,  411,

      417,  418,  419,  421,  422,    0,  414,  412,  413,  424,
        0,  427,  430,    0,  428,  415,  416,  414,    0,    0,
      505,  417,  418,  419,  421,  422,  415,  417,  432,  432,
      424,  416,  427,  430,  422,  428,  436,  418,  424,  421,
      419,  505,  433,  427,  430,  428,  437,  436,  435,  432,
      432,  433,  434,  505,  442,  434,  435,  436,  444,  459,
      432,    0,  449,  433,  443,    0,  443,  437,  436,  435,
        0,  447,  433,  434,  436,  442,  434,  435,  433,  444,
      459,    0,  437,  449,  434,  444,  435,  438,  459,  438,
      442,  443,  447,  438,  438,  438,  438,  445,  438,  445,

      449,  446,  448,  446,  448,  452,    0,  447,  438,  450,
      438,  450,  443,    0,  438,  438,  438,  438,  503,  438,
      451,  453,  451,  453,    0,  438,  452,  443,  446,  448,
      464,  454,  466,  445,  450,  468,    0,  446,  455,  503,
      455,  452,  460,    0,  460,  451,  503,  451,  453,  446,
      448,  464,  454,  466,  445,  450,  468,  461,  446,  461,
      445,  454,  464,  466,  446,  448,  451,  468,  451,  453,
        0,  455,  450,  456,  476,  456,  460,  465,  467,  465,
      467,  470,  471,  451,  453,  469,  472,  469,    0,    0,
      473,  461,  455,  481,  475,  476,  601,  460,  601,    0,

      456,  455,  470,  471,  476,  460,  456,  472,  465,  471,
      467,  473,  461,  478,  481,  475,  469,  470,  482,    0,
      461,  456,  472,  484,  487,  481,  487,  456,  473,  465,
      475,  467,  629,  486,  478,  486,  456,  469,    0,  482,
      465,  467,  478,  488,  484,  488,  495,    0,  469,  482,
        0,  487,  491,  629,  491,  484,  618,  489,  618,  489,
      487,  621,  496,  621,  486,  486,  490,  495,  490,  629,
        0,  514,  487,  495,  488,    0,  504,  488,  497,  491,
      506,  487,  489,  496,    0,  486,  486,  487,  507,  496,
      489,  490,  514,  507,    0,  488,  486,  504,  488,  497,

      491,  506,  490,  489,  504,  497,  488,  514,    0,  507,
      515,  489,  490,  506,  507,  491,  517,  521,  522,  531,
      489,  507,  656,  490,  656,    0,  529,  549,    0,  490,
      492,  515,  492,  527,  663,  528,  663,  517,  521,  522,
      531,    0,    0,  517,  534,  521,  515,  529,  549,  670,
        0,  522,  531,  529,  527,  492,  528,  492,  535,  532,
      549,  492,  492,  492,  492,  534,  492,    0,  539,  527,
      670,  528,  534,    0,    0,  670,  492,  540,  492,  535,
      532,  541,  492,  492,  492,  492,  532,  492,  536,  539,
      550,  536,  547,  492,  535,  539,  536,  536,  540,    0,

      548,  551,  541,    0,  540,  558,  551,    0,  541,  536,
      559,  550,  536,  547,  566,  561,  565,  536,  536,  571,
      547,  548,  551,  550,  536,    0,  558,  551,  548,  572,
      573,  559,  576,  575,  551,  566,  561,  565,    0,  578,
      571,  558,  561,  579,  565,    0,  559,  566,  583,    0,
      572,  573,  593,  576,  575,  571,  592,  573,  592,  576,
      578,    0,  591,  602,  579,  572,  575,  578,  580,  583,
      584,  580,  584,  593,  605,  583,  580,  580,  585,  579,
      585,  609,    0,  591,  602,  593,  594,  610,  594,  580,
      591,  592,  580,    0,  595,  605,  595,  580,  580,  602,

      615,  605,  609,  603,  580,  603,  584,    0,  610,  609,
      627,  616,  592,  616,  585,  687,  594,  687,  630,  592,
      610,  615,    0,  622,  595,  622,  617,  584,  617,  595,
      603,  627,  628,  584,    0,  585,  615,  594,  616,  630,
      619,  585,  619,  627,  620,  595,  620,  637,  631,  594,
      595,  603,  631,  628,  623,  630,  623,  595,  622,  616,
        0,  636,  617,    0,    0,  628,  603,  639,  637,  631,
      619,  639,  642,  631,  616,  643,  644,  645,  651,  622,
      620,  623,  636,  617,  637,  631,  622,    0,  639,  617,
        0,  619,  639,  642,  636,  652,  643,  644,  645,  651,

      657,  620,  623,  619,  639,  642,  646,  620,  643,  659,
      646,  651,    0,  644,  645,  654,  652,  623,  624,  654,
      624,  657,  707,  660,  707,  660,  658,  646,  658,  666,
      659,  646,  652,  657,  667,    0,  654,  661,    0,  661,
      654,    0,    0,  646,    0,  624,  659,  671,  624,  660,
      666,    0,  654,  624,  624,  667,  658,  669,    0,  669,
        0,    0,  666,  661,  674,    0,  624,  661,  671,  624,
      660,  667,  675,  671,  624,  624,  677,  658,    0,    0,
      678,  624,    0,  669,  661,  674,  660,  669,  661,  658,
      674,  681,  682,  675,  685,  684,  685,  677,  675,    0,

      661,  678,  677,  688,  669,  688,  678,  689,  669,  691,
        0,  692,  681,  682,  693,    0,  684,  681,  682,    0,
      669,  684,  694,  695,  696,    0,  697,  698,  689,  698,
      691,  685,  692,  689,    0,  693,  691,  699,  692,    0,
      688,  693,    0,  694,  695,  696,    0,  697,    0,  694,
      695,  696,  685,  697,    0,    0,    0,  685,  699,    0,
        0,  688,    0,  698,  699,    0,  688,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  698,    0,    0,    0,    0,    0,
      698,  711,  711,  712,    0,  712,  712,  713,  713,  713,

      713,  714,  714,  714,  714,  715,  715,  715,  715,  716,
      716,  716,  716,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[55] =
    {   0,
       71,   72,   73,   74,   76,   84,   85,   86,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  110,  111,  112,  113,  120,  121,
      122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
      132,  133,  134,  135,  136,  137,  138,  139,  140,  142,
      145,  147,  148,  149
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#line 11 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;
bool eof = false;

void reset_state(){
    memset(string_buf, 0, sizeof(string_buf));
    string_buf_ptr = string_buf;
    BEGIN 0;
}

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */
int add_string(char *s, bool more);

/*
 * Define names for regular expressions here.
 */

#line 1422 "cool-lex.cc"

#define INITIAL 0
#define COMMENT 1
#define STRING 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
/* %% [7.0] user's declarations go here */
#line 64 "cool.flex"


 /*
  *  Nested comments
  */


#line 1717 "cool-lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 710 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2514 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 55 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 55 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 56 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "cool.flex"
{BEGIN 0;}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 72 "cool.flex"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "cool.flex"
{ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 74 "cool.flex"
{ }
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 75 "cool.flex"
{if (!eof){cool_yylval.error_msg = "EOF in comment";eof=true;return ERROR;}else{return 0;}}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "cool.flex"
{BEGIN COMMENT;}
	YY_BREAK
/*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */
case 6:
YY_RULE_SETUP
#line 84 "cool.flex"
{ int code = add_string(yytext, false); if(code) return code; }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 85 "cool.flex"
{ int code = add_string(yytext, true); if (code) return code; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 86 "cool.flex"
{ string_buf_ptr = string_buf; BEGIN STRING; }
	YY_BREAK
/*
  *  The multiple-character operators.
  */
case 9:
YY_RULE_SETUP
#line 93 "cool.flex"
{ return '+';  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "cool.flex"
{ return '*';  }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "cool.flex"
{ return '-';  }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "cool.flex"
{ return '~';  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 97 "cool.flex"
{ return '/';  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 98 "cool.flex"
{ return ';';  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 99 "cool.flex"
{ return '(';  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "cool.flex"
{ return ')';  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "cool.flex"
{ return '{';  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 102 "cool.flex"
{ return '}';  }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 103 "cool.flex"
{ return ':';  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 104 "cool.flex"
{ return '.';  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 105 "cool.flex"
{ return '@';  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 106 "cool.flex"
{ return '<';  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 107 "cool.flex"
{ return '=';  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 108 "cool.flex"
{ return ',';  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 110 "cool.flex"
{ cool_yylval.boolean = true ; return BOOL_CONST;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 111 "cool.flex"
{ cool_yylval.boolean = false; return BOOL_CONST;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 112 "cool.flex"
{ cool_yylval.symbol = stringtable.add_string(yytext); return TYPEID;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 113 "cool.flex"
{ cool_yylval.symbol = inttable.add_string(yytext); return INT_CONST;}
	YY_BREAK
/*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */
case 29:
YY_RULE_SETUP
#line 120 "cool.flex"
{ return CLASS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 121 "cool.flex"
{ return ELSE;  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "cool.flex"
{ return FI; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 123 "cool.flex"
{ return IF; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 124 "cool.flex"
{ return IN; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 125 "cool.flex"
{ return INHERITS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 126 "cool.flex"
{ return LET; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 127 "cool.flex"
{ return LOOP; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 128 "cool.flex"
{ return POOL; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 129 "cool.flex"
{ return THEN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 130 "cool.flex"
{ return WHILE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 131 "cool.flex"
{ return CASE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 132 "cool.flex"
{ return ESAC; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 133 "cool.flex"
{ return OF; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 134 "cool.flex"
{ return NEW; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 135 "cool.flex"
{ return ISVOID; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 136 "cool.flex"
{ return ASSIGN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 137 "cool.flex"
{ return LE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 138 "cool.flex"
{ return DARROW; }
	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 139 "cool.flex"
{ }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 140 "cool.flex"
{ return NOT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 142 "cool.flex"
{ cool_yylval.symbol = stringtable.add_string(yytext); return OBJECTID;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 145 "cool.flex"
{cool_yylval.error_msg = "Unmatched *)"; return ERROR;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 147 "cool.flex"
{ }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 148 "cool.flex"
{curr_lineno++;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 149 "cool.flex"
{cool_yylval.error_msg = yytext; return ERROR;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 152 "cool.flex"
ECHO;
	YY_BREAK
#line 2095 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 710 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 710 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 709);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 152 "cool.flex"



int add_string(char *s, bool more)
{
    size_t size = strlen(s);
    bool slashQuote = size >= 2 && s[size-2] == '\\';

    if (more){
        if(s[size-2] != '\\'){
	    reset_state();
	    cool_yylval.error_msg = "Unterminated string constant";
	    return ERROR;
	}
	size -= 2;
    } 

    if (!slashQuote)
	size--;

    for(size_t i = 0;i<size;i++){
	if (string_buf_ptr - string_buf >= MAX_STR_CONST){
	    cool_yylval.error_msg = "String constant too long";
	    reset_state();
	    return ERROR;
	}
	if (s[i] == '\\'){
	    continue;
        }
	if (s[i] == '\0'){
	    cool_yylval.error_msg = "String contains null character";
	    reset_state();
	    return ERROR;
        }
	if (s[i] == EOF){
	    printf("ok\n");
        }
	*string_buf_ptr = s[i];
	string_buf_ptr++;
    }

    if (!more && !slashQuote){
	cool_yylval.symbol = stringtable.add_string(string_buf);
	reset_state();
	return STR_CONST;
    }

    return 0;

}


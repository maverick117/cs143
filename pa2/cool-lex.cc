#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 41
#define YY_END_OF_BUFFER 42
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[711] =
    {   0,
        0,    0,    1,    1,    0,    0,   42,   40,   38,   39,
       11,   12,   12,   12,   12,   37,   12,   12,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       40,    1,    1,    1,    3,    4,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   40,   38,   10,    9,   12,   12,
       12,   37,   12,   12,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   40,   38,    6,    7,
        8,   37,   31,   32,   33,   36,   36,   36,    0,   36,
       36,    0,   17,   17,   18,   19,   36,   18,   36,   36,
        0,   36,   36,    0,   28,   28,   36,    0,   36,    0,
       36,    0,   35,   35,   35,   35,   35,   35,   17,   17,
       18,   19,   35,   35,   35,   35,   35,   28,   35,   35,
       35,    0,   35,    0,    0,   18,    0,    0,   19,    0,
        0,   17,    1,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    0,   10,    9,   38,
        6,    7,   37,   31,   32,   33,   36,   36,   36,    0,
       36,   36,    0,   17,   17,   18,   19,   36,   18,   36,
       36,    0,   36,   36,    0,   28,   28,   36,    0,   36,
        0,   36,    0,   35,   35,   35,   35,   35,   35,   17,
       17,   18,   19,   35,   35,   35,   35,   35,   28,   35,
       35,   35,    0,   35,    0,    0,   18,    0,    0,   19,

        0,    0,   17,    8,   36,    0,   36,    0,    0,   36,
        0,   36,    0,    0,   36,    0,   36,    0,    0,   21,
       21,   36,    0,   21,   29,   29,   34,   34,   29,   36,
        0,   36,    0,   36,    0,   35,   35,   35,   35,   35,
        0,   35,   35,   21,   35,   29,   34,   35,   35,   35,
        0,    0,   35,   21,    0,    0,    0,   34,    0,    0,
        0,   21,   21,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   36,    0,   36,    0,    0,   36,    0,   36,
        0,    0,   36,    0,   36,    0,    0,   21,   21,   36,
        0,   21,   29,   29,   34,   34,   29,   36,    0,   36,
        0,   36,    0,   35,   35,   35,   35,   35,    0,   35,
       35,   21,   35,   29,   34,   35,   35,   35,    0,    0,
       35,   21,    0,    0,    0,   34,    0,    0,    0,   21,
       21,   26,   26,   36,    0,   26,   16,   16,   27,   27,
       16,   36,    0,   36,    0,    0,   22,   22,   23,   23,

       24,   24,   36,    0,   26,   35,   16,   27,   35,    0,
       35,   35,   22,   23,   24,   13,   13,   13,   35,   24,
       16,   22,   27,   27,   16,   16,   23,   16,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   26,   26,   36,    0,   26,
       16,   16,   27,   27,   16,   36,    0,   36,    0,    0,
       22,   22,   23,   23,   24,   24,   36,    0,   26,   35,

       16,   27,   35,    0,   35,   35,   22,   23,   24,   13,
       13,   13,   35,   24,   16,   22,   27,   27,   16,   16,
       23,   16,   15,   15,   36,    0,   36,    0,    0,   25,
       25,   15,   14,   14,   35,   35,   25,   15,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   15,   15,   36,    0,   36,    0,
        0,   25,   25,   15,   14,   14,   35,   35,   25,   15,
       36,    0,   30,   30,   30,   35,   30,    1,    1,    1,
        1,    1,    1,    1,   36,    0,   30,   30,   30,   35,
       30,   36,    0,   35,    1,    1,    1,   36,    0,   35,

       20,   20,   20,    1,    1,    1,   20,   20,   20,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   26,   27,   21,   21,   28,   21,   29,   30,   31,
       21,   32,   33,   34,   35,   36,   37,   21,   21,   21,
        1,    1,    1,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   40,   45,   46,   40,   40,   47,   40,   48,
       49,   50,   40,   51,   52,   53,   54,   55,   56,   40,
       40,   40,   57,   58,   59,   60,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[61] =
    {   0,
        1,    1,    2,    1,    3,    3,    3,    1,    1,    1,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[720] =
    {   0,
        0,    0,   60,    0,  120,    0,  394, 3720,  388, 3720,
     3720,  376, 3720,  361,  315,  290,  171,  283,    0,  162,
      156,  158,  167,  163,  175,  169,  168,  165,  196,    0,
      208,  201,  210,  213,  215,  220,  218,  202,  248,  244,
      287,    0,  293,    0,  285, 3720,  271,    0,  239,  185,
      222,  345,  405,  290,  338,  446,  350,  410,  247,  398,
      353,  422,  504,  564,  497,  511,  605,  453,  569,  509,
      557,  581,  609,  648,  278,  281, 3720, 3720,  293,  284,
      318,  337,  365,  368,  706,  766,  699,  513,  807,  641,
      771,  772,  759,  811,  821,  879,  939,  872,  942,  981,

      814,  944,  983,  985, 1016, 1025, 1081,  233, 3720, 3720,
        0,  218, 3720, 3720, 3720,    0,  246,  270,  627,  286,
      371,  631,    0, 3720,    0,  452,  396,  700,  378,  397,
      561,  402,  493,  694,    0, 3720,  477,  587,  485,  764,
      443,  445,    0,  343,  770,  696,  813,  702,    0,  815,
        0,  819,  604,  597,  704,  645,  703,    0,  763,  875,
      441,  877,  876,  869,  870, 3720,  936,  932,  959,  982,
     1018, 1120,    0,  205, 3720,  184,    0,    0,    0, 1030,
     1084, 1032, 1029, 1151, 1074, 1083, 1123,    0, 1154, 1157,
     1169, 1020, 1160, 1191, 1176, 1194, 1208, 1198, 1225,    0,

     1237,  818, 1249,  937, 1243, 1091, 1240, 1271, 1274, 1283,
     1280, 1286, 1289,  979, 1292, 1314, 1326, 1317, 1338, 1332,
     1358, 1335, 1371, 1374, 1380, 1379, 1403, 1134, 1402,    0,
     1235, 1415, 1142, 1394, 1420, 1459,  348, 3720, 3720,  484,
      384,  638,  912,  701,  736,  738, 1443, 1490, 1493, 1516,
     1505, 1496, 1527, 1506,  740, 1530, 1539, 1553, 1567, 1562,
     1574, 1603, 1599, 1571, 1613, 1606,  799, 1621, 1442, 1615,
     1503, 1647, 1673, 1652, 1662, 1664, 1669, 1668, 1678, 1704,
     1709, 1710, 1713, 1714, 1745, 1746, 1750, 1760, 1762, 1782,
     1791, 1797, 1819, 1825, 1823, 1854,  871, 1843, 1865, 1876,

     1862, 1896, 1952,    0, 1076, 1383, 1291, 1418, 1781, 1441,
     1445, 1217, 1354, 1881, 1498, 1620, 1395, 1705, 1884,    0,
     3720, 1697, 1733, 1832,    0, 3720,    0, 3720, 3720, 1481,
     1701, 1439, 1880, 1848, 1890, 1792, 1607, 1835, 1573, 1861,
     1892, 1902, 1900,    0, 1909,    0,    0, 1915, 1917, 1923,
     1944, 1970, 1956, 3720, 1964, 1982, 1988, 1989, 2001, 2004,
     1966, 3720, 2041, 2040, 2008, 2053, 1919, 2052, 2088, 2009,
     2074, 1682, 2079, 2105, 2083, 2089, 1999, 2100, 2114,    0,
     2131, 2119, 2124, 2136,    0, 2137,    0,    0, 2140, 2138,
     2171, 2144, 2173, 2139, 2183, 2188, 2185, 2195, 2205, 1997,

     2227, 2228, 2234, 2240, 2241, 2244, 2256, 2276, 2269, 2270,
     2277, 2290,    0, 2293, 2306, 2305, 2315, 2320, 2334, 2295,
        0, 2371, 2370, 2367, 2383, 2393, 2403, 2419, 2428, 2437,
     2434, 2446, 2470, 2430, 2444, 2476, 2496, 2477,  905, 2483,
     2515, 2528, 2509,  910, 2516,  972, 1015, 2522, 2548, 2542,
     2554, 2540, 2581, 2568, 2571, 2577, 2597, 2594, 2627, 2623,
     2620, 2614, 2637, 2617, 2643, 2660, 2663, 2669, 2670, 2700,
     2678, 1088, 2716, 2727, 2719, 2731, 2735, 2749, 2737, 1092,
     2805,    0, 3720, 2274, 2314, 2324,    0, 3720,    0, 3720,
     3720, 2357, 2450, 2469, 2710, 2740,    0, 3720,    0, 3720,

        0, 3720, 2730, 2759,    0, 2327,    0,    0, 2763, 2768,
     2489, 2767,    0,    0,    0,    0, 3720, 3720, 2772, 2773,
     2411, 3720, 2791, 2770, 3720, 2792, 2808, 2832, 2840,    0,
     2841, 2787, 2834, 2842,    0, 2857,    0,    0, 2874, 2850,
     2883, 2849, 2882, 2877,    0, 2892,    0, 2898,    0, 2899,
     2893, 2924, 2927, 2933, 2934, 2966, 2925, 2956, 2950, 2973,
     2978, 2982, 2991,    0,    0, 2998, 2992, 2990,    0, 2988,
     2995,    0, 3000, 3009, 3030, 3040, 1094, 3044, 3062, 3066,
     3058, 1157, 3064, 1240, 1477, 3080, 3103, 3101, 3086, 3130,
     3117, 1572, 3121, 1741, 3135, 1838, 3163, 3122, 3138, 3164,

     3166, 3170, 3180, 3211, 3198, 3205, 3192, 3214, 3220, 3227,
     1857, 1960, 3240, 3267, 3272, 1966, 3254, 3285, 2040, 3289,
     3291, 3347,    0, 3720, 3143, 3219,  285, 1024, 3274,    0,
     3720,    0,    0, 3720, 3253, 1057,    0, 3280, 3307,    0,
     3336, 3287, 3339, 1325, 3330, 3338,    0, 3364, 3367,    0,
     3380, 3381, 3382, 3389, 3404, 2050, 3414, 3441, 3435, 3433,
     3446, 3437, 2074, 3439, 3451, 2136, 3474, 3480, 3486, 3507,
     2519, 2789,    0, 3720, 3027, 3270,    0, 3503, 3283, 3496,
        0, 3483, 3532, 3520, 3535, 3542, 3544, 2246, 3577, 3569,
     3566, 3084, 3120, 3431, 3576, 3540, 3579, 3586, 3617, 3612,

        0, 3720,    0, 3619,    0, 3621, 3626, 2341, 3633, 3720,
      182,  179, 3691, 3695, 3699, 3703, 3707, 3711, 3715
    } ;

static yyconst flex_int16_t yy_def[720] =
    {   0,
      710,    1,  710,    3,  710,    5,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      710,  713,  713,  713,  710,  710,  710,  713,  713,  713,
      713,  714,  714,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  715,  715,   64,   64,   64,   64,   64,   64,
       64,   64,   64,  713,  716,  716,  710,  710,  716,  716,
      716,  716,  716,  716,  717,  717,   86,   86,   86,   86,
       86,   86,   86,   86,   86,  718,  718,   97,   97,   97,

       97,   97,   97,   97,   97,   97,  716,  710,  710,  710,
      719,  710,  710,  710,  710,  711,  711,  711,  710,  711,
      711,  710,  711,  710,  711,  711,  711,  710,  711,  711,
      710,  711,  711,  710,  711,  710,  711,  710,  711,  710,
      711,  710,  712,  712,  712,  712,  712,  712,  712,  710,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  710,  712,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  713,  713,  710,  713,  713,  713,  713,   53,
       53,   53,  713,   53,   53,  713,   53,  713,   53,   53,
       53,  713,   53,   53,  713,   53,   53,  713,   53,  713,

       53,  713,   53,  713,   53,  713,   64,   64,   64,   64,
       64,   64,   64,  713,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  713,   64,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  716,  710,  710,  716,
      716,  716,  716,  716,  716,  716,   86,   86,   86,  716,
       86,   86,  716,   86,  716,   86,   86,   86,  716,   86,
       86,  716,   86,   86,  716,   86,  716,   86,  716,   86,
      716,   86,  716,   97,   97,   97,   97,   97,   97,   97,
      716,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,  716,   97,  716,  716,  716,  716,  716,  716,

      716,  716,  716,  719,  711,  710,  711,  710,  710,  711,
      710,  711,  710,  710,  711,  710,  711,  710,  710,  711,
      710,  711,  710,  710,  711,  710,  711,  710,  710,  711,
      710,  711,  710,  711,  710,  712,  712,  712,  712,  712,
      710,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      710,  710,  712,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,   53,  713,   53,  713,  713,   53,  713,
       53,  713,  713,   53,  713,   53,  713,  713,   53,  713,
       53,  713,  713,   53,  713,   53,  713,  713,   53,  713,
       53,  713,   53,  713,   64,   64,   64,   64,   64,  713,

       64,   64,   64,   64,   64,   64,   64,   64,   64,  713,
      713,   64,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,   86,  716,   86,  716,  716,   86,  716,   86,
      716,  716,   86,  716,   86,  716,  716,   86,  716,   86,
      716,  716,   86,  716,   86,  716,  716,   86,  716,   86,
      716,   86,  716,   97,   97,   97,   97,   97,  716,   97,
       97,   97,   97,   97,   97,   97,   97,   97,  716,  716,
       97,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  711,  710,  711,  710,  710,  711,  710,  711,  710,
      710,  711,  710,  711,  710,  710,  711,  710,  711,  710,

      711,  710,  711,  710,  712,  712,  712,  712,  712,  710,
      712,  712,  712,  712,  712,  712,  710,  710,  712,  710,
      710,  710,  710,  710,  710,  710,  710,  710,   53,  713,
       53,  713,  713,   53,  713,   53,  713,  713,   53,  713,
       53,  713,  713,   53,  713,   53,  713,   53,  713,   53,
      713,   64,   64,   64,   64,   64,  713,   64,   64,   64,
       64,   64,   64,  713,  713,   64,  713,  713,  713,  713,
      713,  713,  713,  713,  713,   86,  716,   86,  716,  716,
       86,  716,   86,  716,  716,   86,  716,   86,  716,  716,
       86,  716,   86,  716,   86,  716,   86,  716,   97,   97,

       97,   97,   97,  716,   97,   97,   97,   97,   97,   97,
      716,  716,   97,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  711,  710,  711,  710,  711,  710,  710,  711,
      710,  712,  712,  710,  712,  712,  712,  710,   53,  713,
       53,  713,   53,  713,  713,   53,  713,   64,   64,  713,
       64,   64,   64,  713,   86,  716,   86,  716,   86,  716,
      716,   86,  716,   97,   97,  716,   97,   97,   97,  716,
      711,  710,  711,  710,  710,  712,  712,   53,  713,   53,
      713,  713,   64,   64,   86,  716,   86,  716,  716,   97,
       97,  711,  710,  712,   53,  713,   64,   86,  716,   97,

      711,  710,  712,   53,  713,   64,   86,  716,   97,    0,
      710,  710,  710,  710,  710,  710,  710,  710,  710
    } ;

static yyconst flex_uint16_t yy_nxt[3781] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   13,   13,   15,
       13,   13,   16,   13,   13,   17,   18,    8,   13,   19,
       19,   20,   19,   21,   22,   19,   23,   24,   25,   26,
       27,   19,   19,   28,   19,   19,   29,    8,   30,   30,
       31,   30,   32,   33,   30,   34,   35,   36,   37,   38,
       30,   30,   39,   30,   30,   40,   13,   41,   13,   13,
       42,   43,   10,   44,   45,   46,   47,   48,   48,   48,
       48,   48,   49,   48,   48,   50,   51,   42,   48,   52,
       52,   53,   52,   54,   55,   52,   56,   57,   58,   59,
       60,   52,   52,   61,   52,   52,   62,   42,   63,   63,

       64,   63,   65,   66,   63,   67,   68,   69,   70,   71,
       63,   63,   72,   63,   63,   73,   48,   74,   48,   48,
       75,   76,   77,   78,   79,   80,   81,   80,   80,   80,
       80,   80,   82,   80,   80,   83,   84,   75,   80,   85,
       85,   86,   85,   87,   88,   85,   89,   90,   91,   92,
       93,   85,   85,   94,   85,   85,   95,   75,   96,   96,
       97,   96,   98,   99,   96,  100,  101,  102,  103,  104,
       96,   96,  105,   96,   96,  106,   80,  107,   80,   80,
      113,  117,  143,  120,  123,  116,  129,  114,  121,  118,
      139,  125,  130,  135,  177,  126,  176,  137,  132,  127,

      117,  178,  120,  123,  133,  129,  174,  121,  118,  139,
      125,  130,  135,  122,  126,  124,  137,  132,  127,  119,
      131,  141,  140,  133,  128,  138,  136,  144,  146,  148,
      112,  159,  134,  147,  108,  145,  149,  151,  154,  179,
      141,  152,  158,  156,  155,  153,  144,  146,  148,  157,
      159,  176,  147,  142,  145,  149,  151,  154,  122,  138,
      152,  158,  156,  155,  153,  119,  180,  150,  157,  163,
      128,  199,  131,  160,  180,  136,  175,  134,  305,  161,
      238,  239,  240,  238,  239,  180,  238,  239,  163,  307,
      199,  109,  160,  180,  174,  238,  239,  305,  161,  241,

      115,  142,  112,  306,  200,  162,  164,  673,  307,  180,
      165,  166,  167,  124,  168,  169,  170,  184,  310,  171,
      238,  239,  185,  242,  111,  164,  673,  308,  180,  165,
      166,  167,  124,  168,  169,  170,  184,  310,  171,  238,
      239,  185,  674,  311,  172,  173,  173,  186,  173,  243,
      238,  239,  173,  173,  173,  173,  173,  180,  173,  173,
      173,  173,  173,  173,  187,  180,  110,  238,  239,  180,
      238,  239,  180,  193,  244,  336,  180,  180,  203,  194,
      180,  245,  109,  187,  180,  246,  238,  239,  180,  108,
      312,  180,  193,  710,  336,  188,  180,  203,  194,  180,

      306,  173,  173,  173,  173,  173,  173,  195,  173,  312,
      204,  320,  173,  173,  173,  173,  173,  180,  173,  173,
      173,  173,  173,  173,  181,  180,  322,  201,  313,  180,
      320,  317,  182,  196,  710,  321,  180,  180,  325,  197,
      710,  180,  710,  181,  180,  322,  201,  205,  180,  180,
      317,  182,  196,  318,  323,  202,  180,  325,  197,  326,
      180,  173,  183,  173,  173,  180,  205,  198,  180,  334,
      189,  335,  207,  180,  190,  350,  218,  315,  191,  206,
      207,  710,  219,  710,  180,  240,  238,  239,  334,  189,
      335,  207,  180,  190,  350,  218,  315,  191,  351,  207,

      335,  219,  335,  192,  173,  173,  330,  173,  332,  316,
      195,  173,  173,  173,  173,  173,  207,  173,  173,  173,
      173,  173,  173,  710,  210,  330,  327,  332,  207,  211,
      212,  710,  247,  222,  331,  207,  207,  213,  207,  254,
      247,  710,  333,  210,  710,  327,  710,  207,  211,  212,
      328,  247,  222,  710,  186,  207,  213,  207,  254,  247,
      173,  173,  173,  173,  173,  173,  200,  173,  214,  710,
      255,  173,  173,  173,  173,  173,  207,  173,  173,  173,
      173,  173,  173,  208,  207,  710,  223,  710,  207,  710,
      323,  209,  220,  710,  321,  207,  207,  710,  221,  710,

      207,  710,  208,  207,  710,  223,  224,  207,  207,  323,
      209,  220,  225,  321,  202,  207,  331,  221,  324,  207,
      173,  183,  173,  173,  207,  224,  198,  207,  207,  215,
      344,  225,  207,  216,  227,  331,  207,  217,  226,  343,
      238,  239,  710,  207,  331,  710,  308,  207,  215,  344,
      313,  207,  216,  227,  321,  207,  217,  710,  343,  306,
      247,  318,  192,  311,  260,  308,  206,  228,  247,  313,
      261,  229,  230,  231,  188,  232,  233,  234,  306,  247,
      235,  346,  311,  260,  309,  710,  228,  247,  314,  261,
      229,  230,  231,  188,  232,  233,  234,  710,  262,  235,

      346,  710,  326,  238,  239,  236,  237,  237,  238,  239,
      237,  237,  237,  237,  237,  237,  237,  237,  247,  237,
      237,  237,  237,  237,  237,  316,  251,  328,  338,  340,
      326,  252,  710,  345,  710,  318,  347,  247,  238,  239,
      238,  239,  238,  239,  316,  251,  328,  338,  340,  326,
      252,  329,  345,  311,  318,  347,  253,  319,  710,  341,
      328,  323,  237,  237,  237,  237,  237,  237,  238,  239,
      237,  237,  237,  237,  237,  237,  237,  237,  247,  237,
      237,  237,  237,  237,  237,  248,  247,  333,  268,  337,
      247,  247,  348,  249,  263,  710,  266,  247,  247,  247,

      264,  238,  239,  710,  248,  247,  333,  268,  337,  247,
      247,  348,  249,  263,  710,  266,  269,  247,  247,  264,
      331,  333,  237,  250,  237,  237,  247,  308,  265,  267,
      247,  256,  339,  274,  247,  257,  270,  285,  247,  258,
      247,  274,  341,  286,  342,  247,  272,  390,  247,  247,
      256,  339,  274,  247,  257,  270,  285,  247,  258,  247,
      274,  341,  286,  342,  259,  272,  390,  247,  271,  710,
      313,  262,  341,  238,  239,  390,  316,  710,  273,  237,
      237,  238,  239,  237,  237,  237,  237,  237,  237,  237,
      237,  274,  237,  237,  237,  237,  237,  237,  349,  277,

      333,  306,  353,  321,  278,  710,  326,  238,  239,  710,
      274,  351,  238,  239,  238,  239,  710,  349,  277,  333,
      306,  353,  321,  278,  243,  326,  306,  354,  710,  253,
      351,  710,  333,  335,  352,  237,  237,  237,  237,  237,
      237,  238,  239,  237,  237,  237,  237,  237,  237,  237,
      237,  308,  237,  237,  237,  237,  237,  237,  275,  333,
      392,  279,  335,  274,  311,  710,  276,  287,  280,  274,
      308,  274,  710,  288,  238,  239,  710,  275,  333,  392,
      279,  335,  274,  311,  316,  276,  287,  280,  274,  356,
      274,  710,  288,  355,  392,  237,  250,  237,  237,  281,

      274,  265,  274,  316,  274,  282,  400,  289,  274,  283,
      274,  357,  274,  284,  290,  328,  316,  238,  239,  274,
      710,  274,  710,  274,  282,  400,  289,  274,  283,  274,
      357,  274,  284,  290,  328,  274,  400,  313,  259,  358,
      267,  291,  269,  274,  274,  375,  674,  292,  367,  180,
      294,  366,  274,  318,  274,  377,  313,  180,  710,  180,
      291,  365,  274,  274,  375,  674,  292,  367,  180,  294,
      366,  274,  318,  293,  377,  359,  180,  378,  180,  677,
      365,  674,  273,  238,  239,  710,  368,  173,  710,  367,
      238,  239,  710,  371,  238,  239,  238,  239,  677,  482,

      295,  180,  372,  180,  296,  297,  298,  255,  299,  300,
      301,  180,  371,  302,  674,  370,  364,  394,  482,  295,
      180,  372,  180,  296,  297,  298,  255,  299,  300,  301,
      180,  372,  302,  483,  370,  364,  394,  710,  303,  360,
      373,  365,  180,  333,  710,  316,  335,  710,  394,  357,
      180,  710,  361,  362,  710,  318,  326,  710,  360,  238,
      239,  180,  333,  710,  316,  335,  365,  375,  357,  180,
      180,  361,  362,  180,  318,  326,  180,  363,  180,  180,
      173,  180,  374,  369,  180,  365,  375,  180,  180,  180,
      710,  365,  180,  379,  710,  180,  180,  180,  180,  375,

      180,  374,  369,  180,  376,  382,  180,  180,  370,  380,
      180,  173,  379,  180,  375,  180,  710,  380,  180,  710,
      381,  180,  710,  376,  382,  710,  377,  180,  380,  180,
      384,  387,  180,  383,  385,  180,  710,  180,  489,  381,
      180,  386,  238,  239,  180,  710,  180,  710,  382,  384,
      387,  385,  180,  385,  180,  388,  180,  489,  392,  207,
      386,  394,  180,  180,  180,  387,  389,  207,  180,  393,
      180,  180,  391,  710,  490,  180,  180,  392,  207,  710,
      394,  180,  173,  180,  710,  389,  207,  180,  393,  180,
      207,  391,  414,  396,  390,  180,  710,  173,  207,  398,

      394,  207,  207,  395,  710,  207,  392,  207,  207,  207,
      207,  207,  396,  399,  710,  397,  207,  207,  398,  207,
      207,  207,  395,  484,  207,  710,  207,  207,  365,  207,
      207,  367,  399,  207,  397,  207,  207,  372,  207,  401,
      370,  207,  484,  400,  207,  207,  173,  681,  485,  173,
      403,  207,  207,  207,  207,  207,  710,  207,  401,  207,
      207,  402,  207,  207,  207,  207,  681,  404,  405,  403,
      207,  375,  207,  207,  380,  490,  207,  207,  207,  710,
      402,  207,  681,  377,  207,  207,  404,  405,  710,  385,
      207,  406,  173,  207,  490,  382,  207,  408,  207,  207,

      407,  207,  392,  710,  207,  710,  483,  207,  710,  207,
      406,  490,  207,  410,  409,  387,  408,  207,  207,  407,
      207,  392,  207,  416,  494,  483,  207,  387,  390,  412,
      207,  392,  410,  409,  367,  380,  411,  410,  385,  372,
      483,  207,  416,  494,  238,  239,  387,  370,  412,  207,
      485,  417,  495,  367,  380,  377,  710,  385,  372,  413,
      394,  710,  247,  710,  487,  710,  370,  501,  488,  485,
      247,  449,  415,  710,  377,  485,  710,  418,  419,  238,
      239,  247,  392,  487,  375,  394,  501,  488,  416,  247,
      449,  420,  421,  710,  377,  385,  502,  419,  488,  449,

      237,  392,  488,  375,  394,  238,  239,  416,  499,  247,
      420,  421,  425,  377,  385,  430,  422,  247,  238,  239,
      247,  492,  423,  247,  247,  247,  451,  499,  247,  238,
      239,  425,  247,  247,  430,  426,  247,  428,  500,  247,
      492,  423,  247,  247,  247,  451,  431,  424,  424,  247,
      426,  247,  247,  431,  426,  493,  428,  247,  247,  429,
      451,  710,  429,  237,  433,  431,  247,  424,  247,  238,
      239,  710,  247,  427,  238,  239,  247,  247,  429,  710,
      247,  247,  710,  433,  432,  247,  710,  237,  435,  247,
      247,  247,  434,  247,  508,  438,  434,  710,  247,  247,

      247,  247,  436,  440,  445,  238,  239,  435,  247,  247,
      436,  434,  247,  508,  438,  238,  239,  247,  247,  439,
      247,  436,  440,  445,  437,  247,  247,  710,  446,  710,
      490,  441,  441,  247,  247,  443,  439,  247,  450,  506,
      247,  710,  247,  493,  247,  247,  446,  710,  247,  444,
      448,  441,  247,  247,  443,  439,  444,  450,  506,  247,
      442,  247,  493,  237,  485,  446,  247,  247,  444,  448,
      447,  274,  451,  452,  247,  238,  239,  493,  449,  274,
      710,  274,  710,  455,  710,  247,  710,  457,  274,  274,
      274,  274,  452,  247,  454,  274,  274,  274,  274,  453,

      274,  456,  455,  537,  453,  458,  457,  274,  274,  237,
      274,  238,  239,  454,  274,  274,  274,  710,  453,  424,
      456,  426,  537,  274,  458,  431,  429,  497,  500,  274,
      453,  274,  274,  274,  495,  459,  459,  274,  460,  537,
      274,  274,  274,  238,  239,  710,  497,  500,  274,  461,
      274,  274,  274,  495,  498,  459,  274,  460,  500,  274,
      274,  237,  495,  498,  274,  274,  459,  237,  461,  274,
      434,  436,  274,  274,  710,  463,  710,  274,  462,  274,
      710,  274,  498,  274,  274,  710,  464,  274,  274,  274,
      498,  274,  274,  465,  463,  710,  274,  462,  274,  710,

      274,  274,  439,  441,  483,  464,  274,  444,  274,  274,
      274,  466,  465,  485,  467,  505,  274,  446,  274,  237,
      274,  238,  239,  483,  274,  238,  239,  710,  274,  274,
      466,  468,  485,  467,  505,  274,  710,  274,  486,  449,
      238,  239,  451,  274,  274,  238,  239,  710,  451,  483,
      468,  471,  274,  469,  469,  424,  238,  239,  507,  238,
      239,  451,  498,  274,  238,  239,  451,  238,  239,  453,
      471,  274,  469,  710,  424,  503,  470,  507,  238,  239,
      424,  498,  453,  710,  426,  451,  710,  439,  453,  498,
      444,  475,  488,  509,  503,  446,  710,  429,  238,  239,

      473,  434,  490,  426,  488,  504,  439,  493,  502,  444,
      475,  472,  509,  495,  446,  431,  429,  504,  510,  476,
      434,  490,  474,  488,  510,  511,  493,  502,  710,  512,
      710,  436,  495,  434,  431,  710,  504,  502,  491,  513,
      710,  496,  514,  510,  511,  515,  516,  504,  512,  510,
      436,  532,  710,  477,  238,  239,  710,  495,  513,  493,
      710,  514,  238,  239,  515,  516,  498,  517,  238,  239,
      532,  478,  500,  710,  502,  451,  532,  434,  453,  710,
      517,  475,  710,  519,  479,  480,  517,  436,  444,  525,
      478,  504,  502,  517,  451,  710,  434,  453,  502,  710,

      475,  517,  519,  479,  480,  488,  436,  444,  525,  481,
      504,  502,  517,  504,  485,  500,  500,  502,  498,  498,
      710,  520,  490,  525,  488,  490,  710,  518,  542,  557,
      495,  530,  535,  485,  500,  500,  485,  498,  498,  521,
      710,  490,  238,  239,  490,  522,  522,  542,  557,  495,
      530,  535,  238,  239,  557,  485,  542,  710,  523,  180,
      710,  524,  490,  529,  526,  530,  535,  180,  527,  502,
      495,  498,  180,  485,  710,  530,  238,  239,  180,  710,
      180,  490,  529,  526,  532,  531,  180,  527,  502,  495,
      498,  180,  485,  180,  530,  536,  710,  530,  528,  180,

      537,  180,  535,  532,  531,  710,  540,  180,  180,  533,
      532,  534,  180,  710,  536,  180,  180,  710,  541,  537,
      180,  535,  710,  540,  180,  540,  180,  180,  539,  542,
      534,  537,  180,  180,  180,  180,  538,  541,  238,  239,
      540,  180,  540,  180,  710,  535,  542,  539,  542,  545,
      180,  180,  180,  710,  545,  180,  180,  543,  180,  180,
      180,  544,  540,  180,  180,  547,  551,  546,  545,  180,
      710,  173,  549,  545,  180,  180,  545,  180,  180,  710,
      544,  545,  180,  180,  547,  551,  546,  710,  545,  710,
      180,  549,  180,  173,  173,  547,  551,  547,  180,  548,

      550,  549,  207,  710,  207,  710,  552,  207,  554,  180,
      207,  180,  207,  710,  207,  207,  555,  180,  548,  550,
      553,  207,  207,  207,  207,  552,  207,  554,  549,  207,
      551,  207,  207,  207,  207,  555,  710,  556,  710,  553,
      530,  207,  535,  207,  710,  532,  207,  207,  238,  239,
      558,  207,  537,  207,  207,  207,  556,  559,  710,  207,
      207,  207,  557,  207,  710,  207,  207,  207,  207,  558,
      560,  207,  207,  207,  207,  207,  559,  710,  207,  207,
      207,  710,  207,  561,  540,  542,  207,  207,  207,  560,
      207,  173,  563,  564,  207,  207,  207,  545,  173,  710,

      564,  173,  561,  207,  562,  549,  623,  207,  710,  207,
      710,  563,  564,  547,  207,  207,  710,  566,  572,  564,
      551,  549,  207,  562,  549,  623,  564,  564,  207,  535,
      710,  624,  547,  549,  565,  545,  566,  572,  532,  551,
      549,  537,  547,  238,  239,  545,  624,  551,  535,  542,
      567,  547,  572,  710,  545,  537,  624,  532,  710,  632,
      537,  547,  569,  568,  545,  624,  532,  710,  542,  238,
      239,  624,  569,  710,  537,  624,  710,  570,  632,  710,
      710,  624,  710,  710,  624,  532,  710,  710,  625,  247,
      577,  571,  537,  576,  573,  238,  239,  247,  574,  549,

      542,  545,  247,  532,  710,  238,  239,  625,  247,  577,
      247,  537,  576,  573,  626,  578,  247,  574,  549,  542,
      545,  247,  532,  710,  577,  579,  577,  577,  575,  247,
      238,  239,  238,  239,  578,  579,  238,  239,  247,  710,
      579,  710,  581,  624,  579,  577,  247,  710,  238,  239,
      579,  582,  710,  587,  579,  584,  247,  247,  583,  710,
      580,  581,  624,  247,  247,  247,  710,  584,  624,  582,
      582,  247,  587,  588,  584,  247,  582,  583,  238,  239,
      710,  626,  247,  247,  710,  582,  584,  587,  582,  247,
      247,  584,  588,  586,  584,  627,  247,  247,  238,  239,

      626,  589,  247,  585,  247,  589,  710,  626,  247,  710,
      247,  710,  586,  591,  627,  247,  247,  238,  239,  587,
      635,  247,  710,  247,  589,  589,  628,  587,  247,  247,
      238,  239,  591,  589,  237,  247,  247,  710,  587,  635,
      592,  247,  710,  247,  589,  592,  626,  247,  710,  593,
      238,  239,  692,  590,  247,  247,  238,  239,  592,  247,
      247,  247,  247,  710,  592,  710,  237,  597,  593,  247,
      595,  692,  592,  237,  710,  594,  693,  592,  247,  594,
      247,  710,  596,  238,  239,  592,  597,  274,  247,  595,
      274,  599,  710,  710,  594,  274,  274,  598,  274,  596,

      601,  596,  710,  600,  274,  594,  274,  710,  598,  274,
      599,  596,  710,  274,  274,  274,  274,  274,  602,  601,
      710,  274,  600,  274,  274,  577,  603,  598,  579,  238,
      239,  710,  274,  274,  582,  274,  274,  602,  598,  274,
      274,  274,  274,  274,  274,  603,  605,  274,  710,  606,
      274,  604,  274,  710,  584,  274,  274,  710,  274,  604,
      274,  274,  274,  274,  274,  605,  274,  607,  606,  274,
      274,  237,  238,  239,  237,  274,  710,  589,  604,  274,
      587,  274,  274,  274,  604,  710,  607,  608,  274,  274,
      274,  609,  610,  611,  592,  710,  274,  274,  274,  710,

      237,  274,  238,  239,  710,  613,  608,  274,  710,  274,
      609,  610,  611,  710,  710,  274,  274,  594,  238,  239,
      596,  238,  239,  611,  613,  710,  611,  611,  596,  238,
      239,  710,  710,  238,  239,  598,  628,  238,  239,  238,
      239,  710,  611,  598,  596,  710,  594,  596,  710,  592,
      582,  238,  239,  630,  710,  628,  584,  612,  594,  579,
      619,  592,  598,  596,  589,  594,  628,  628,  592,  582,
      584,  626,  630,  614,  710,  584,  616,  594,  579,  619,
      592,  579,  631,  589,  615,  628,  633,  631,  616,  584,
      626,  634,  617,  636,  619,  637,  631,  629,  710,  710,

      579,  631,  624,  710,  710,  633,  618,  238,  239,  710,
      634,  710,  636,  710,  637,  631,  631,  628,  710,  640,
      634,  624,  693,  626,  628,  634,  584,  624,  620,  631,
      631,  631,  621,  596,  589,  592,  628,  579,  640,  710,
      710,  693,  626,  710,  640,  584,  693,  620,  628,  626,
      631,  621,  596,  589,  592,  631,  579,  710,  628,  180,
      180,  180,  622,  626,  624,  631,  640,  180,  180,  180,
      710,  710,  710,  639,  631,  644,  180,  628,  180,  180,
      180,  642,  626,  624,  180,  640,  180,  180,  180,  638,
      710,  640,  639,  180,  644,  180,  180,  173,  640,  173,

      642,  180,  180,  180,  180,  641,  644,  642,  644,  643,
      180,  180,  180,  642,  173,  180,  647,  180,  180,  180,
      180,  180,  646,  180,  641,  180,  180,  644,  643,  180,
      180,  642,  642,  710,  173,  647,  180,  180,  180,  645,
      644,  646,  710,  207,  180,  180,  207,  710,  650,  173,
      647,  207,  207,  207,  207,  173,  647,  710,  710,  648,
      207,  207,  207,  710,  710,  207,  710,  650,  710,  207,
      207,  207,  207,  207,  710,  207,  652,  207,  648,  207,
      207,  173,  650,  207,  640,  207,  710,  651,  207,  649,
      173,  173,  207,  207,  207,  652,  207,  207,  710,  710,

      207,  207,  207,  710,  207,  207,  651,  644,  649,  207,
      207,  207,  207,  642,  644,  647,  207,  207,  207,  207,
      207,  653,  640,  650,  207,  207,  710,  640,  207,  207,
      173,  642,  647,  644,  647,  173,  207,  207,  710,  173,
      653,  640,  710,  710,  207,  644,  640,  640,  173,  647,
      642,  647,  640,  647,  710,  647,  644,  642,  710,  247,
      693,  642,  640,  247,  238,  239,  647,  247,  238,  239,
      710,  247,  647,  710,  710,  644,  655,  247,  247,  693,
      642,  640,  247,  247,  693,  247,  247,  654,  238,  239,
      247,  247,  710,  710,  656,  655,  247,  237,  656,  247,

      710,  656,  247,  710,  247,  238,  239,  247,  710,  710,
      247,  657,  660,  656,  710,  237,  701,  656,  247,  656,
      247,  237,  710,  656,  238,  239,  247,  659,  247,  710,
      657,  660,  238,  239,  658,  701,  247,  658,  710,  247,
      247,  702,  710,  660,  247,  663,  659,  247,  247,  710,
      710,  710,  702,  658,  247,  247,  660,  274,  660,  247,
      658,  658,  247,  247,  663,  274,  710,  247,  710,  671,
      710,  702,  710,  247,  237,  660,  274,  702,  237,  663,
      658,  247,  247,  274,  274,  274,  662,  661,  671,  274,
      247,  274,  237,  274,  710,  237,  664,  274,  710,  274,

      672,  247,  274,  665,  274,  662,  710,  274,  274,  247,
      274,  274,  274,  238,  239,  664,  274,  274,  274,  274,
      663,  656,  665,  237,  274,  274,  274,  237,  710,  667,
      274,  668,  274,  274,  666,  710,  274,  666,  274,  274,
      710,  274,  710,  274,  274,  672,  274,  274,  667,  237,
      668,  274,  274,  666,  274,  658,  238,  239,  274,  274,
      274,  710,  660,  669,  672,  274,  274,  274,  666,  238,
      239,  237,  710,  274,  238,  239,  672,  237,  274,  676,
      660,  710,  669,  710,  237,  710,  274,  238,  239,  710,
      663,  238,  239,  238,  239,  710,  674,  663,  676,  660,

      672,  710,  674,  694,  656,  710,  672,  710,  710,  663,
      672,  660,  710,  679,  663,  674,  696,  656,  710,  672,
      658,  674,  694,  656,  663,  672,  180,  693,  710,  656,
      710,  675,  679,  663,  180,  696,  656,  675,  710,  658,
      696,  710,  656,  710,  679,  180,  658,  710,  663,  238,
      239,  710,  681,  180,  710,  180,  679,  180,  180,  710,
      710,  680,  678,  180,  173,  180,  180,  710,  710,  710,
      663,  681,  710,  660,  180,  679,  180,  180,  658,  656,
      680,  678,  180,  207,  180,  180,  207,  682,  710,  663,
      710,  207,  660,  679,  207,  173,  681,  658,  656,  207,

      207,  207,  207,  684,  670,  207,  683,  207,  207,  207,
      207,  681,  710,  207,  710,  679,  710,  710,  207,  207,
      207,  173,  684,  247,  173,  683,  207,  207,  207,  710,
      681,  247,  710,  247,  679,  238,  239,  679,  681,  173,
      685,  247,  247,  238,  239,  710,  682,  710,  238,  239,
      247,  710,  247,  710,  247,  688,  247,  687,  274,  685,
      247,  237,  247,  703,  247,  710,  274,  686,  688,  710,
      274,  686,  686,  247,  688,  247,  687,  274,  274,  710,
      710,  247,  703,  247,  710,  274,  686,  688,  702,  274,
      688,  686,  688,  274,  237,  710,  237,  274,  686,  274,

      690,  274,  691,  689,  710,  274,  710,  274,  237,  238,
      239,  710,  274,  274,  710,  180,  696,  710,  274,  690,
      274,  691,  180,  180,  274,  710,  274,  710,  710,  688,
      180,  686,  274,  686,  180,  696,  695,  688,  710,  207,
      696,  180,  180,  237,  238,  239,  710,  207,  688,  180,
      710,  207,  686,  173,  247,  695,  710,  710,  207,  207,
      696,  710,  247,  247,  689,  697,  207,  710,  698,  710,
      207,  247,  705,  247,  710,  699,  710,  173,  207,  238,
      239,  247,  247,  710,  697,  274,  710,  698,  274,  696,
      247,  705,  699,  274,  699,  180,  274,  705,  207,  699,

      710,  237,  700,  180,  274,  247,  207,  274,  704,  710,
      699,  706,  274,  247,  180,  274,  710,  207,  707,  238,
      239,  700,  180,  237,  247,  207,  699,  704,  710,  699,
      706,  274,  247,  705,  699,  710,  705,  707,  180,  274,
      207,  710,  710,  708,  709,  247,  180,  710,  207,  708,
      274,  710,  274,  247,  710,  710,  710,  180,  274,  207,
      274,  710,  710,  709,  247,  180,  710,  207,  708,  708,
      710,  274,  247,  710,  708,  710,  173,  710,  173,  274,
      710,  710,  710,  237,  710,  710,  710,  710,  710,  710,
      237,  173,  710,  710,  173,  180,  710,  710,  180,  207,

      710,  710,  207,  237,  237,  237,  237,  247,  247,  247,
      247,  274,  274,  274,  274,  304,  710,  304,  304,    7,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710
    } ;

static yyconst flex_int16_t yy_chk[3781] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       17,   20,  712,   21,   22,  711,   24,   17,   21,   20,
       28,   23,   24,   26,   50,   23,  176,   27,   25,   23,

       20,   50,   21,   22,   25,   24,  174,   21,   20,   28,
       23,   24,   26,   21,   23,   22,   27,   25,   23,   20,
       24,   29,   28,   25,   23,   27,   26,   31,   32,   33,
      112,   38,   25,   32,  108,   31,   33,   34,   35,   51,
       29,   34,   37,   36,   35,   34,   31,   32,   33,   36,
       38,   49,   32,   29,   31,   33,   34,   35,   32,   38,
       34,   37,   36,   35,   34,   31,   59,   33,   36,   40,
       34,   59,   35,   39,   59,   37,   47,   36,  117,   39,
       75,   75,   76,   76,   76,   59,   80,   80,   40,  118,
       59,   45,   39,   59,   43,   79,   79,  117,   39,   79,

       18,   40,   16,  117,   59,   39,   41,  627,  118,   54,
       41,   41,   41,   41,   41,   41,   41,   54,  120,   41,
       81,   81,   54,   81,   15,   41,  627,  118,   54,   41,
       41,   41,   41,   41,   41,   41,   54,  120,   41,   82,
       82,   54,  627,  120,   41,   52,   52,   54,   52,   82,
      237,  237,   52,   52,   52,   52,   52,   55,   52,   52,
       52,   52,   52,   52,   55,   55,   14,   83,   83,   57,
       84,   84,   61,   57,   83,  144,   55,   57,   61,   57,
       61,   83,   12,   55,   55,   84,  241,  241,   57,    9,
      121,   61,   57,    7,  144,   55,   57,   61,   57,   61,

      144,   52,   52,   52,   52,   53,   53,   57,   53,  121,
       61,  129,   53,   53,   53,   53,   53,   60,   53,   53,
       53,   53,   53,   53,   53,   60,  130,   60,  121,   58,
      129,  127,   53,   58,    0,  129,   60,   58,  132,   58,
        0,   62,    0,   53,   60,  130,   60,   62,   58,   62,
      127,   53,   58,  127,  130,   60,   58,  132,   58,  132,
       62,   53,   53,   53,   53,   56,   62,   58,   62,  141,
       56,  142,   68,   56,   56,  161,   68,  126,   56,   62,
       68,    0,   68,    0,   56,  240,  240,  240,  141,   56,
      142,   68,   56,   56,  161,   68,  126,   56,  161,   68,

      141,   68,  142,   56,   63,   63,  137,   63,  139,  126,
       68,   63,   63,   63,   63,   63,   65,   63,   63,   63,
       63,   63,   63,    0,   65,  137,  133,  139,   70,   65,
       66,    0,   88,   70,  137,   65,   70,   66,   66,   88,
       88,    0,  139,   65,    0,  133,    0,   70,   65,   66,
      133,   88,   70,    0,   65,   70,   66,   66,   88,   88,
       63,   63,   63,   63,   64,   64,   70,   64,   66,    0,
       88,   64,   64,   64,   64,   64,   71,   64,   64,   64,
       64,   64,   64,   64,   71,    0,   71,    0,   69,    0,
      131,   64,   69,    0,  131,   71,   69,    0,   69,    0,

       72,    0,   64,   71,    0,   71,   72,   69,   72,  131,
       64,   69,   72,  131,   71,   69,  138,   69,  131,   72,
       64,   64,   64,   64,   67,   72,   69,   72,   73,   67,
      154,   72,   67,   67,   73,  138,   73,   67,   72,  153,
      242,  242,    0,   67,  138,    0,  119,   73,   67,  154,
      122,   67,   67,   73,  154,   73,   67,    0,  153,  119,
       90,  153,   67,  122,   90,  119,   73,   74,   90,  122,
       90,   74,   74,   74,   74,   74,   74,   74,  119,   90,
       74,  156,  122,   90,  119,    0,   74,   90,  122,   90,
       74,   74,   74,   74,   74,   74,   74,    0,   90,   74,

      156,    0,  156,  244,  244,   74,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   87,   85,
       85,   85,   85,   85,   85,  128,   87,  134,  146,  148,
      134,   87,    0,  155,    0,  128,  157,   87,  245,  245,
      246,  246,  255,  255,  128,   87,  134,  146,  148,  134,
       87,  134,  155,  146,  128,  157,   87,  128,    0,  148,
      157,  155,   85,   85,   85,   85,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   93,   86,
       86,   86,   86,   86,   86,   86,   93,  140,   93,  145,
       91,   92,  159,   86,   91,    0,   92,   93,   91,   92,

       91,  267,  267,    0,   86,   93,  140,   93,  145,   91,
       92,  159,   86,   91,    0,   92,   93,   91,   92,   91,
      159,  140,   86,   86,   86,   86,   89,  145,   91,   92,
       94,   89,  147,  101,   89,   89,   94,  101,   94,   89,
       95,  101,  150,  101,  152,   89,   95,  202,   95,   94,
       89,  147,  101,   89,   89,   94,  101,   94,   89,   95,
      101,  150,  101,  152,   89,   95,  202,   95,   94,    0,
      147,  101,  150,  297,  297,  202,  152,    0,   95,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   98,   96,   96,   96,   96,   96,   96,  160,   98,

      162,  164,  163,  165,   98,    0,  165,  439,  439,    0,
       98,  162,  444,  444,  243,  243,    0,  160,   98,  162,
      164,  163,  165,   98,  243,  165,  164,  165,    0,   98,
      162,    0,  160,  163,  162,   96,   96,   96,   96,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,  168,   97,   97,   97,   97,   97,   97,   97,  167,
      204,   99,  167,  102,  168,    0,   97,  102,   99,   99,
      168,  102,    0,  102,  446,  446,    0,   97,  167,  204,
       99,  167,  102,  168,  169,   97,  102,   99,   99,  168,
      102,    0,  102,  167,  204,   97,   97,   97,   97,   99,

      100,  102,  103,  169,  104,  100,  214,  103,  100,  100,
      103,  170,  104,  100,  104,  170,  169,  447,  447,  100,
        0,  103,    0,  104,  100,  214,  103,  100,  100,  103,
      170,  104,  100,  104,  170,  105,  214,  171,  100,  170,
      103,  105,  104,  105,  106,  192,  628,  105,  183,  180,
      106,  182,  106,  171,  105,  192,  171,  180,    0,  182,
      105,  183,  105,  106,  192,  628,  105,  183,  180,  106,
      182,  106,  171,  105,  192,  171,  180,  192,  182,  636,
      183,  628,  106,  107,  107,    0,  183,  180,    0,  182,
      472,  472,    0,  185,  480,  480,  577,  577,  636,  305,

      107,  185,  186,  181,  107,  107,  107,  107,  107,  107,
      107,  181,  185,  107,  636,  186,  181,  206,  305,  107,
      185,  186,  181,  107,  107,  107,  107,  107,  107,  107,
      181,  185,  107,  305,  186,  181,  206,    0,  107,  172,
      186,  181,  187,  172,    0,  172,  172,    0,  206,  172,
      187,    0,  172,  172,    0,  172,  172,    0,  172,  582,
      582,  187,  172,    0,  172,  172,  228,  233,  172,  187,
      184,  172,  172,  189,  172,  172,  190,  172,  184,  193,
      187,  189,  190,  184,  190,  228,  233,  193,  191,  184,
        0,  228,  189,  193,    0,  190,  191,  184,  193,  233,

      189,  190,  184,  190,  191,  195,  193,  191,  184,  195,
      194,  189,  193,  196,  190,  191,    0,  193,  194,    0,
      194,  196,    0,  191,  195,    0,  191,  197,  195,  194,
      196,  198,  196,  195,  198,  197,    0,  194,  312,  194,
      196,  197,  584,  584,  199,    0,  197,    0,  194,  196,
      198,  196,  199,  198,  197,  198,  201,  312,  231,  207,
      197,  231,  205,  199,  201,  197,  201,  207,  203,  205,
      205,  199,  203,    0,  312,  201,  203,  231,  207,    0,
      231,  205,  199,  201,    0,  201,  207,  203,  205,  205,
      208,  203,  231,  209,  201,  203,    0,  207,  208,  211,

      205,  209,  210,  208,    0,  212,  203,  211,  213,  208,
      210,  215,  209,  212,    0,  210,  213,  208,  211,  215,
      209,  210,  208,  307,  212,    0,  211,  213,  208,  210,
      215,  209,  212,  216,  210,  213,  218,  211,  215,  216,
      210,  216,  307,  212,  218,  217,  213,  644,  307,  215,
      218,  220,  216,  217,  222,  218,    0,  219,  216,  220,
      216,  217,  222,  218,  217,  219,  644,  219,  220,  218,
      220,  216,  217,  222,  218,  313,  219,  221,  220,    0,
      217,  222,  644,  217,  219,  221,  219,  220,    0,  220,
      223,  221,  222,  224,  313,  219,  221,  224,  223,  225,

      223,  224,  226,    0,  221,    0,  306,  225,    0,  223,
      221,  313,  224,  226,  225,  221,  224,  223,  225,  223,
      224,  226,  227,  234,  317,  306,  225,  234,  223,  227,
      227,  224,  226,  225,  232,  229,  226,  225,  229,  235,
      306,  227,  234,  317,  269,  269,  234,  232,  227,  227,
      308,  234,  317,  232,  229,  235,    0,  229,  235,  229,
      227,    0,  247,    0,  310,    0,  232,  332,  311,  308,
      247,  269,  232,    0,  235,  308,    0,  235,  236,  585,
      585,  247,  236,  310,  236,  236,  332,  311,  236,  247,
      269,  236,  236,    0,  236,  236,  332,  236,  310,  269,

      247,  236,  311,  236,  236,  271,  271,  236,  330,  248,
      236,  236,  249,  236,  236,  252,  236,  248,  250,  250,
      249,  315,  248,  252,  251,  254,  271,  330,  248,  253,
      253,  249,  251,  254,  252,  250,  248,  251,  330,  249,
      315,  248,  252,  251,  254,  271,  253,  248,  250,  256,
      249,  251,  254,  252,  250,  315,  251,  256,  257,  253,
      271,    0,  251,  254,  257,  253,  257,  250,  256,  259,
      259,    0,  258,  250,  592,  592,  256,  257,  253,    0,
      258,  260,    0,  257,  253,  257,    0,  256,  258,  260,
      264,  258,  259,  261,  339,  260,  257,    0,  264,  258,

      260,  261,  259,  261,  264,  262,  262,  258,  260,  264,
      258,  259,  261,  339,  260,  265,  265,  264,  263,  260,
      261,  259,  261,  264,  259,  266,  263,    0,  264,    0,
      339,  261,  262,  266,  270,  263,  262,  263,  270,  337,
      268,    0,  270,  316,  266,  263,  265,    0,  268,  265,
      268,  262,  266,  270,  263,  262,  263,  270,  337,  268,
      262,  270,  316,  266,  337,  265,  272,  268,  265,  268,
      265,  274,  270,  272,  272,  273,  273,  316,  268,  274,
        0,  275,    0,  276,    0,  272,    0,  278,  277,  275,
      274,  276,  272,  272,  275,  278,  277,  279,  274,  273,

      275,  277,  276,  372,  272,  279,  278,  277,  275,  274,
      276,  281,  281,  275,  278,  277,  279,    0,  273,  275,
      277,  276,  372,  280,  279,  278,  277,  322,  331,  282,
      273,  280,  283,  284,  318,  279,  281,  282,  283,  372,
      283,  284,  280,  594,  594,    0,  322,  331,  282,  284,
      280,  283,  284,  318,  322,  281,  282,  283,  331,  283,
      284,  280,  318,  323,  285,  286,  281,  282,  284,  287,
      283,  284,  285,  286,    0,  286,    0,  287,  285,  288,
        0,  289,  323,  285,  286,    0,  287,  288,  287,  289,
      323,  285,  286,  288,  286,    0,  287,  285,  288,    0,

      289,  290,  285,  286,  309,  287,  288,  287,  289,  290,
      291,  290,  288,  309,  291,  336,  292,  288,  291,  289,
      290,  293,  293,  309,  292,  295,  295,    0,  290,  291,
      290,  292,  309,  291,  336,  292,    0,  291,  309,  290,
      596,  596,  293,  292,  294,  298,  298,    0,  291,  336,
      292,  294,  294,  293,  292,  295,  296,  296,  338,  611,
      611,  293,  324,  294,  301,  301,  298,  299,  299,  298,
      294,  294,  293,    0,  295,  334,  293,  338,  300,  300,
      295,  324,  294,    0,  299,  298,    0,  296,  298,  324,
      296,  301,  338,  340,  334,  301,    0,  299,  302,  302,

      298,  300,  314,  299,  314,  334,  296,  319,  333,  296,
      301,  296,  340,  319,  301,  302,  299,  335,  340,  301,
      300,  314,  299,  314,  341,  342,  319,  333,    0,  343,
        0,  302,  319,  300,  302,    0,  335,  333,  314,  345,
        0,  319,  348,  341,  342,  349,  350,  335,  343,  341,
      302,  367,    0,  302,  303,  303,    0,  343,  345,  342,
        0,  348,  612,  612,  349,  350,  345,  351,  616,  616,
      367,  303,  348,    0,  349,  303,  367,  303,  303,    0,
      350,  303,    0,  353,  303,  303,  351,  303,  303,  361,
      303,  355,  355,  352,  303,    0,  303,  303,  352,    0,

      303,  351,  353,  303,  303,  356,  303,  303,  361,  303,
      355,  355,  352,  353,  356,  357,  358,  352,  357,  358,
        0,  355,  359,  361,  356,  360,    0,  352,  377,  400,
      359,  365,  370,  356,  357,  358,  360,  357,  358,  356,
        0,  359,  619,  619,  360,  357,  358,  377,  400,  359,
      365,  370,  656,  656,  400,  360,  377,    0,  359,  364,
        0,  360,  363,  364,  363,  365,  370,  364,  363,  363,
      363,  363,  366,  363,    0,  368,  663,  663,  364,    0,
      366,  363,  364,  363,  368,  366,  364,  363,  363,  363,
      363,  366,  363,  371,  368,  371,    0,  364,  363,  366,

      373,  371,  373,  368,  366,    0,  375,  369,  376,  368,
      366,  369,  371,    0,  371,  369,  376,    0,  376,  373,
      371,  373,    0,  378,  374,  375,  369,  376,  374,  378,
      369,  371,  374,  379,  369,  376,  373,  376,  666,  666,
      375,  379,  378,  374,    0,  369,  376,  374,  378,  382,
      381,  374,  379,    0,  383,  384,  386,  378,  381,  389,
      379,  381,  374,  384,  386,  390,  394,  389,  382,  381,
        0,  379,  392,  383,  384,  386,  382,  381,  389,    0,
      381,  383,  384,  386,  390,  394,  389,    0,  381,    0,
      391,  392,  393,  384,  386,  390,  394,  389,  391,  391,

      393,  392,  395,    0,  397,    0,  395,  396,  397,  391,
      395,  393,  397,    0,  398,  396,  398,  391,  391,  393,
      396,  395,  398,  397,  399,  395,  396,  397,  391,  395,
      393,  397,  399,  398,  396,  398,    0,  399,    0,  396,
      395,  398,  397,  399,    0,  396,  401,  402,  688,  688,
      401,  399,  398,  403,  401,  402,  399,  402,    0,  404,
      405,  403,  399,  406,    0,  401,  402,  404,  405,  401,
      404,  406,  403,  401,  402,  407,  402,    0,  404,  405,
      403,    0,  406,  407,  401,  402,  404,  405,  409,  404,
      406,  403,  409,  410,  407,  408,  409,  404,  405,    0,

      411,  406,  407,  408,  408,  411,  484,  409,    0,  412,
        0,  409,  410,  407,  408,  409,    0,  412,  420,  411,
      414,  414,  408,  408,  411,  484,  409,  410,  412,  415,
        0,  484,  416,  408,  411,  416,  412,  420,  415,  414,
      414,  418,  417,  708,  708,  417,  485,  412,  415,  418,
      414,  416,  420,    0,  416,  419,  486,  415,    0,  506,
      418,  417,  416,  415,  417,  485,  419,    0,  418,  424,
      424,  485,  417,    0,  419,  486,    0,  418,  506,    0,
        0,  486,    0,    0,  506,  419,    0,    0,  492,  423,
      424,  419,  422,  423,  422,  426,  426,  423,  422,  422,

      422,  422,  425,  422,    0,  427,  427,  492,  423,  424,
      425,  422,  423,  422,  492,  425,  423,  422,  422,  422,
      422,  425,  422,    0,  424,  426,  427,  423,  422,  425,
      429,  429,  434,  434,  425,  427,  431,  431,  428,    0,
      425,    0,  428,  521,  426,  427,  428,    0,  432,  432,
      426,  429,    0,  434,  427,  431,  430,  428,  430,    0,
      427,  428,  521,  435,  430,  428,    0,  432,  521,  432,
      429,  435,  434,  435,  431,  430,  428,  430,  436,  436,
        0,  493,  435,  430,    0,  429,  432,  434,  432,  433,
      435,  431,  435,  433,  430,  494,  438,  433,  437,  437,

      493,  435,  440,  432,  438,  436,    0,  493,  433,    0,
      440,    0,  433,  440,  494,  438,  433,  441,  441,  437,
      511,  440,    0,  438,  436,  437,  494,  433,  443,  440,
      442,  442,  440,  436,  438,  445,  443,    0,  437,  511,
      440,  448,    0,  445,  437,  441,  511,  443,    0,  448,
      449,  449,  671,  437,  445,  443,  451,  451,  442,  452,
      448,  450,  445,    0,  441,    0,  443,  452,  448,  450,
      450,  671,  441,  445,    0,  449,  671,  442,  452,  448,
      450,    0,  451,  453,  453,  442,  452,  454,  450,  450,
      455,  454,    0,    0,  449,  454,  456,  452,  455,  450,

      456,  451,    0,  455,  456,  449,  454,    0,  453,  455,
      454,  451,    0,  458,  454,  456,  457,  455,  457,  456,
        0,  458,  455,  456,  457,  454,  458,  453,  455,  459,
      459,    0,  458,  462,  456,  457,  464,  457,  453,  461,
      458,  462,  460,  457,  464,  458,  460,  461,    0,  461,
      460,  458,  462,    0,  457,  464,  463,    0,  461,  459,
      462,  460,  465,  464,  463,  460,  461,  463,  461,  460,
      465,  462,  469,  469,  464,  463,    0,  461,  459,  466,
      460,  465,  467,  463,  459,    0,  463,  466,  468,  465,
      467,  467,  468,  469,  463,    0,  468,  471,  466,    0,

      465,  467,  470,  470,    0,  471,  466,  468,    0,  467,
      467,  468,  469,    0,    0,  468,  471,  466,  473,  473,
      467,  475,  475,  470,  471,    0,  468,  469,  470,  474,
      474,    0,    0,  476,  476,  471,  495,  477,  477,  479,
      479,    0,  470,  473,  473,    0,  475,  470,    0,  475,
      474,  478,  478,  503,    0,  495,  477,  470,  476,  474,
      479,  476,  473,  473,  477,  475,  496,  495,  475,  474,
      478,  496,  503,  473,    0,  477,  475,  476,  474,  479,
      476,  478,  504,  477,  474,  496,  509,  503,  476,  478,
      496,  510,  477,  512,  479,  519,  520,  496,    0,    0,

      478,  504,  524,    0,    0,  509,  478,  481,  481,    0,
      510,    0,  512,    0,  519,  520,  504,  523,    0,  532,
      509,  524,  672,  526,  512,  510,  481,  524,  481,  519,
      520,  527,  481,  481,  481,  481,  523,  481,  532,    0,
        0,  672,  526,    0,  532,  481,  672,  481,  523,  526,
      527,  481,  481,  481,  481,  528,  481,    0,  528,  529,
      531,  534,  481,  528,  528,  527,  533,  529,  531,  534,
        0,    0,    0,  531,  528,  542,  536,  528,  529,  531,
      534,  540,  528,  528,  536,  533,  529,  531,  534,  528,
        0,  533,  531,  539,  542,  536,  544,  529,  531,  534,

      540,  539,  541,  536,  544,  539,  542,  540,  543,  541,
      541,  546,  539,  543,  536,  544,  551,  548,  550,  546,
      539,  541,  550,  544,  539,  548,  550,  543,  541,  541,
      546,  539,  543,    0,  544,  551,  548,  550,  546,  543,
      541,  550,    0,  552,  548,  550,  553,    0,  557,  546,
      551,  552,  554,  555,  553,  548,  550,    0,    0,  553,
      554,  555,  552,    0,    0,  553,    0,  557,    0,  559,
      552,  554,  555,  553,    0,  558,  559,  559,  553,  554,
      555,  552,  557,  558,  553,  556,    0,  558,  559,  556,
      554,  555,  560,  556,  558,  559,  559,  561,    0,    0,

      560,  562,  558,    0,  556,  561,  558,  559,  556,  562,
      563,  560,  556,  558,  570,  567,  561,  566,  563,  560,
      562,  566,  568,  556,  561,  566,    0,  571,  562,  563,
      560,  573,  574,  570,  567,  561,  566,  563,    0,  562,
      566,  568,    0,    0,  566,  570,  571,  568,  563,  567,
      573,  574,  571,  575,    0,  566,  575,  573,    0,  576,
      675,  575,  575,  578,  579,  579,  574,  576,  580,  580,
        0,  578,  575,    0,    0,  575,  578,  581,  576,  675,
      575,  575,  578,  583,  675,  581,  576,  575,  589,  589,
      578,  583,    0,    0,  579,  578,  581,  576,  580,  586,

        0,  578,  583,    0,  581,  587,  587,  586,    0,    0,
      583,  586,  589,  579,    0,  581,  692,  580,  586,  579,
      588,  583,    0,  580,  598,  598,  586,  588,  588,    0,
      586,  589,  590,  590,  587,  692,  591,  586,    0,  588,
      593,  692,    0,  589,  591,  598,  588,  588,  593,    0,
        0,    0,  693,  587,  595,  591,  590,  599,  588,  593,
      587,  590,  595,  591,  598,  599,    0,  593,    0,  625,
        0,  693,    0,  595,  591,  590,  599,  693,  593,  598,
      590,  595,  597,  600,  599,  601,  597,  590,  625,  602,
      597,  600,  595,  601,    0,  599,  600,  602,    0,  603,

      625,  597,  600,  603,  601,  597,    0,  603,  602,  597,
      600,  607,  601,  604,  604,  600,  602,  605,  603,  607,
      597,  600,  603,  601,  606,  605,  603,  602,    0,  605,
      607,  606,  606,  608,  604,    0,  605,  603,  607,  609,
        0,  608,    0,  606,  605,  626,  610,  609,  605,  607,
      606,  606,  608,  604,  610,  605,  617,  617,  609,  613,
      608,    0,  606,  613,  626,  610,  609,  613,  604,  614,
      614,  608,    0,  610,  615,  615,  626,  609,  613,  635,
      617,    0,  613,    0,  610,    0,  613,  618,  618,    0,
      614,  620,  620,  621,  621,    0,  629,  613,  635,  617,

      629,    0,  638,  676,  615,    0,  638,    0,    0,  614,
      635,  617,    0,  642,  621,  629,  679,  618,    0,  629,
      620,  638,  676,  615,  614,  638,  639,  676,    0,  615,
        0,  629,  642,  621,  639,  679,  618,  638,    0,  620,
      679,    0,  618,    0,  642,  639,  620,    0,  621,  622,
      622,    0,  645,  639,    0,  641,  645,  646,  643,    0,
        0,  643,  641,  641,  639,  646,  643,    0,    0,    0,
      622,  645,    0,  622,  641,  645,  646,  643,  622,  622,
      643,  641,  641,  648,  646,  643,  649,  645,    0,  622,
        0,  648,  622,  641,  649,  646,  643,  622,  622,  651,

      652,  653,  648,  652,  622,  649,  651,  651,  652,  653,
      648,  654,    0,  649,    0,  654,    0,    0,  651,  652,
      653,  648,  652,  655,  649,  651,  651,  652,  653,    0,
      654,  655,    0,  657,  654,  660,  660,  651,  652,  653,
      657,  657,  655,  658,  658,    0,  654,    0,  661,  661,
      655,    0,  657,    0,  659,  660,  662,  659,  664,  657,
      657,  655,  659,  694,  662,    0,  664,  658,  661,    0,
      665,  657,  661,  659,  660,  662,  659,  664,  665,    0,
        0,  659,  694,  662,    0,  664,  658,  661,  694,  665,
      660,  661,  659,  667,  662,    0,  664,  665,  658,  668,

      667,  667,  668,  661,    0,  669,    0,  668,  665,  670,
      670,    0,  667,  669,    0,  680,  682,    0,  668,  667,
      667,  668,  678,  680,  669,    0,  668,    0,    0,  670,
      678,  667,  669,  670,  680,  682,  678,  668,    0,  684,
      682,  678,  680,  669,  686,  686,    0,  684,  670,  678,
        0,  683,  670,  680,  685,  678,    0,    0,  684,  683,
      678,    0,  685,  687,  670,  683,  684,    0,  685,    0,
      683,  687,  696,  685,    0,  686,    0,  684,  683,  689,
      689,  685,  687,    0,  683,  691,    0,  685,  690,  683,
      687,  696,  685,  691,  686,  695,  690,  696,  697,  686,

        0,  687,  690,  695,  691,  698,  697,  690,  695,    0,
      689,  697,  691,  698,  695,  690,    0,  697,  698,  699,
      699,  690,  695,  691,  698,  697,  690,  695,    0,  689,
      697,  700,  698,  695,  689,    0,  697,  698,  704,  700,
      706,    0,    0,  698,  700,  707,  704,    0,  706,  699,
      700,    0,  709,  707,    0,    0,    0,  704,  700,  706,
      709,    0,    0,  700,  707,  704,    0,  706,  699,  700,
        0,  709,  707,    0,  699,    0,  704,    0,  706,  709,
        0,    0,    0,  707,    0,    0,    0,    0,    0,    0,
      709,  713,    0,    0,  713,  714,    0,    0,  714,  715,

        0,    0,  715,  716,  716,  716,  716,  717,  717,  717,
      717,  718,  718,  718,  718,  719,    0,  719,  719,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[41] =
    {   0,
       88,   89,   90,   91,   93,   95,   96,   97,  106,  107,
      109,  116,  122,  123,  124,  125,  126,  127,  128,  129,
      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  145,  146,  147,  149,  150,  151
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#line 12 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;
bool eof = false;


extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */

/**
 * Nest a comment when find one
**/
int nestComment(void);

/**
 * Add a string constant to the table. This checks for all the cases
**/
int addString(char *s);

/**
 * Add a string constant to the table. This checks for all the cases
**/
void resetState();

int commentCounter = 0;

/*
 * Define names for regular expressions here.
 */

#line 1692 "cool-lex.cc"

#define INITIAL 0
#define COMMENT 1
#define STRING 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
/* %% [7.0] user's declarations go here */
#line 83 "cool.flex"


 /*
  *  Nested comments
  */
#line 1985 "cool-lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 711 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3720 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 41 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 41 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 42 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 88 "cool.flex"
{ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 89 "cool.flex"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 90 "cool.flex"
{ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 91 "cool.flex"
{ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 93 "cool.flex"
{ int code = nestComment(); if (code) return code;}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 94 "cool.flex"
{ if (!eof){cool_yylval.error_msg = "EOF in comment";eof=true;return ERROR;}else{return 0;}}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 95 "cool.flex"
{commentCounter++; BEGIN COMMENT;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 96 "cool.flex"
{cool_yylval.error_msg = "Unmatched *)"; return ERROR;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 97 "cool.flex"
{ }
	YY_BREAK
/*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */
case 9:
YY_RULE_SETUP
#line 106 "cool.flex"
{ int code = addString(yytext ); if(code) return code; }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 107 "cool.flex"
{ int code = addString(yytext); if (code) return code; }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 108 "cool.flex"
{ if (!eof){cool_yylval.error_msg = "EOF in string constant";eof=true;return ERROR;}else{return 0;}}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 109 "cool.flex"
{ string_buf_ptr = string_buf; BEGIN STRING; }
	YY_BREAK
/*
  *  The multiple-character operators.
  */
case 12:
YY_RULE_SETUP
#line 116 "cool.flex"
{ return yytext[0];}
	YY_BREAK
/*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */
case 13:
YY_RULE_SETUP
#line 122 "cool.flex"
{ cool_yylval.boolean = true ; return BOOL_CONST;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 123 "cool.flex"
{ cool_yylval.boolean = false; return BOOL_CONST;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 124 "cool.flex"
{ return CLASS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 125 "cool.flex"
{ return ELSE;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 126 "cool.flex"
{ return FI; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 127 "cool.flex"
{ return IF; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 128 "cool.flex"
{ return IN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "cool.flex"
{ return INHERITS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "cool.flex"
{ return LET; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "cool.flex"
{ return LOOP; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 132 "cool.flex"
{ return POOL; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "cool.flex"
{ return THEN; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "cool.flex"
{ return WHILE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 135 "cool.flex"
{ return CASE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 136 "cool.flex"
{ return ESAC; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 137 "cool.flex"
{ return OF; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 138 "cool.flex"
{ return NEW; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 139 "cool.flex"
{ return ISVOID; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 140 "cool.flex"
{ return ASSIGN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 141 "cool.flex"
{ return LE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 142 "cool.flex"
{ return DARROW; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 143 "cool.flex"
{ return NOT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 145 "cool.flex"
{ cool_yylval.symbol = stringtable.add_string(yytext); return OBJECTID;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 146 "cool.flex"
{ cool_yylval.symbol = stringtable.add_string(yytext); return TYPEID;  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 147 "cool.flex"
{ cool_yylval.symbol = inttable.add_string(yytext); return INT_CONST;  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 149 "cool.flex"
{ }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 150 "cool.flex"
{ curr_lineno++; }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 151 "cool.flex"
{ cool_yylval.error_msg = yytext; return ERROR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 154 "cool.flex"
ECHO;
	YY_BREAK
#line 2294 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 711 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 711 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 710);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 154 "cool.flex"


int addString(char *s)
{
    size_t size = strlen(s);
    bool more = false;

    for(size_t i = 0;i<size;i++){
	if (string_buf_ptr - string_buf >= MAX_STR_CONST){
	    cool_yylval.error_msg = "String constant too long";
	    resetState();
	    return ERROR;
	}
	if (s[i] == '\\'){
	    if (s[i+1] == 'b'){
		*string_buf_ptr = '\b';
	    } else if (s[i+1] == 'f'){
		*string_buf_ptr = '\f';
	    } else if (s[i+1] == 'n'){
		*string_buf_ptr = '\n';
            } else if (s[i+1] == '\n'){
		*string_buf_ptr = '\n';
		more = true;
	    }else if (s[i+1] == 't'){
		*string_buf_ptr = '\t';
            } else if (s[i+1] == 'v'){
		*string_buf_ptr = '\v';
	    } else if (s[i+1] == '\"'){
		*string_buf_ptr = '\"';
		more = true;
	    }else {
		*string_buf_ptr = s[i+1];
            }
	    string_buf_ptr++;
	    i++;
	    continue;
        }

	if (s[i] == '\"'){
	    cool_yylval.symbol = stringtable.add_string(string_buf);
	    resetState();
	    return STR_CONST;
	} 

        if (s[i] == '\n'){
	    resetState();
	    cool_yylval.error_msg = "Unterminated string constant";
	    return ERROR;
	} 
	*string_buf_ptr = s[i];
	string_buf_ptr++;
    }

    if (!more){
	cool_yylval.error_msg = "String contains null character";
	resetState();
	return ERROR;
    } 

    return 0;

}

int nestComment(){
    commentCounter--;

    if(commentCounter < 0){
	cool_yylval.error_msg = "Unmatched *)"; 
        return ERROR;
    } else if (commentCounter==0) { 
	BEGIN 0;
    }
    return 0;
}

void resetState(){
    memset(string_buf, 0, sizeof(string_buf));
    string_buf_ptr = string_buf;
    BEGIN 0;
}

